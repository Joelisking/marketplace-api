generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  password String
  role     Role
  storeId  String? @unique // each vendor owns at most one store
  store    Store?  @relation("VendorStore", fields: [storeId], references: [id])
  orders   Order[]
}

model Store {
  id       String    @id @default(cuid())
  name     String
  slug     String    @unique
  logoUrl  String?
  owner    User?     @relation("VendorStore") // back-relation, no fields/ref here
  products Product[]
  orders   Order[]
}

model Product {
  id            String      @id @default(cuid())
  storeId       String
  store         Store       @relation(fields: [storeId], references: [id])
  name          String
  price         Int
  stock         Int
  imageUrl      String
  visibleMarket Boolean     @default(true)
  orderItems    OrderItem[]

  @@index([storeId, name])
}

model Order {
  id            String        @id @default(cuid())
  customerId    String
  storeId       String
  status        OrderStatus
  paymentStatus PaymentStatus
  total         Int
  items         OrderItem[]
  customer      User          @relation(fields: [customerId], references: [id])
  store         Store         @relation(fields: [storeId], references: [id])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

enum Role {
  CUSTOMER
  VENDOR
}

enum PaymentStatus {
  UNPAID
  PAID
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
}
