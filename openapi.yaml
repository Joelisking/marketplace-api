openapi: 3.1.0
info:
    title: 'Marketplace API'
    version: 1.0.0
    description: 'Multi-vendor marketplace API â€” Express, TypeScript, Prisma. Auto-generated from Zod schemas.'
servers:
    -
        url: 'http://localhost:4000'
        description: 'Local development'
    -
        url: 'https://api.yourdomain.com'
        description: Production
security:
    -
        bearerAuth: []
tags:
    -
        name: Auth
        description: 'Authentication endpoints'
    -
        name: catalogue
        description: 'Product and store catalogue endpoints'
    -
        name: vendor
        description: 'Vendor dashboard and management endpoints'
    -
        name: analytics
        description: 'Analytics and best-selling products endpoints'
    -
        name: upload
        description: 'Image upload endpoints'
    -
        name: cart
        description: 'Cart management endpoints'
    -
        name: 'Enhanced Cart'
        description: 'Enhanced cart with sync capabilities'
    -
        name: orders
        description: 'Order management endpoints'
    -
        name: customer
        description: 'Customer experience endpoints'
    -
        name: notifications
        description: 'Notification management endpoints'
    -
        name: payment
        description: 'Paystack payment integration endpoints'
components:
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
            description: 'Paste an **access token** here.'
    schemas:
        AddToCartBody:
            type: object
            properties:
                productId:
                    type: string
                    minLength: 1
                quantity:
                    type: integer
                    exclusiveMinimum: 0
                    maximum: 100
            required:
                - productId
                - quantity
        AuthResponse:
            type: object
            properties:
                accessToken:
                    type: string
                refreshToken:
                    type: string
                user:
                    type: object
                    properties:
                        id:
                            type: string
                        email:
                            type: string
                            format: email
                        role:
                            type: string
                            enum:
                                - CUSTOMER
                                - VENDOR
                                - ADMIN
                                - SUPER
                        storeId:
                            type:
                                - string
                                - 'null'
                        firstName:
                            type:
                                - string
                                - 'null'
                        lastName:
                            type:
                                - string
                                - 'null'
                        phone:
                            type:
                                - string
                                - 'null'
                        createdAt:
                            type: string
                            format: date
                        updatedAt:
                            type:
                                - string
                                - 'null'
                            format: date
                    required:
                        - id
                        - email
                        - role
                        - storeId
                        - firstName
                        - lastName
                        - phone
                        - createdAt
                        - updatedAt
            required:
                - accessToken
                - refreshToken
                - user
        CartItemIdParam:
            type: object
            properties:
                productId:
                    type: string
                    description: 'Product ID'
            required:
                - productId
        CartItemResponse:
            type: object
            properties:
                id:
                    type: string
                productId:
                    type: string
                quantity:
                    type: number
                createdAt:
                    type: string
                    format: date
                updatedAt:
                    type:
                        - string
                        - 'null'
                    format: date
                product:
                    type: object
                    properties:
                        id:
                            type: string
                        name:
                            type: string
                        price:
                            type: number
                        imageUrl:
                            type: string
                    required:
                        - id
                        - name
                        - price
                        - imageUrl
            required:
                - id
                - productId
                - quantity
                - createdAt
                - updatedAt
                - product
        CartSummaryResponse:
            type: object
            properties:
                items:
                    type: array
                    items:
                        type: object
                        properties:
                            id:
                                type: string
                            productId:
                                type: string
                            quantity:
                                type: number
                            createdAt:
                                type: string
                                format: date
                            updatedAt:
                                type:
                                    - string
                                    - 'null'
                                format: date
                            product:
                                type: object
                                properties:
                                    id: {type: string}
                                    name: {type: string}
                                    price: {type: number}
                                    imageUrl: {type: string}
                                required:
                                    - id
                                    - name
                                    - price
                                    - imageUrl
                        required:
                            - id
                            - productId
                            - quantity
                            - createdAt
                            - updatedAt
                            - product
                totalItems:
                    type: number
                subtotal:
                    type: number
                estimatedTax:
                    type: number
                estimatedShipping:
                    type: number
                total:
                    type: number
            required:
                - items
                - totalItems
                - subtotal
                - estimatedTax
                - estimatedShipping
                - total
        CheckoutBody:
            type: object
            properties:
                items:
                    type: array
                    items:
                        type: object
                        properties:
                            productId:
                                type: string
                                format: cuid
                            quantity:
                                type: integer
                                minimum: 1
                        required:
                            - productId
                            - quantity
                    minItems: 1
            required:
                - items
        CheckoutItem:
            type: object
            properties:
                productId:
                    type: string
                    format: cuid
                quantity:
                    type: integer
                    minimum: 1
            required:
                - productId
                - quantity
        CustomerOrderDetailsResponse:
            type: object
            properties:
                message:
                    type: string
                data:
                    type: object
                    properties:
                        order:
                            type: object
                            properties:
                                id:
                                    type: string
                                status:
                                    type: string
                                paymentStatus:
                                    type: string
                                total:
                                    type: number
                                subtotal:
                                    type: number
                                tax:
                                    type: number
                                shipping:
                                    type: number
                                discount:
                                    type: number
                                currency:
                                    type: string
                                createdAt:
                                    type: string
                                    format: date
                                updatedAt:
                                    type: [string, 'null']
                                    format: date
                                estimatedDelivery:
                                    type: [string, 'null']
                                    format: date
                                deliveredAt:
                                    type: [string, 'null']
                                    format: date
                                shippingAddress:
                                    type: [object, 'null']
                                    properties: {street: {type: string}, city: {type: string}, state: {type: string}, postalCode: {type: string}, country: {type: string}}
                                    required: [street, city, state, postalCode, country]
                                billingAddress:
                                    type: [object, 'null']
                                    properties: {street: {type: string}, city: {type: string}, state: {type: string}, postalCode: {type: string}, country: {type: string}}
                                    required: [street, city, state, postalCode, country]
                                store:
                                    type: object
                                    properties: {id: {type: string}, name: {type: string}, slug: {type: string}}
                                    required: [id, name, slug]
                                items:
                                    type: array
                                    items: {type: object, properties: {id: {type: string}, productId: {type: string}, quantity: {type: number}, price: {type: number}, product: {type: object, properties: {id: {type: string}, name: {type: string}, imageUrl: {type: string}}, required: [id, name, imageUrl]}}, required: [id, productId, quantity, price, product]}
                            required:
                                - id
                                - status
                                - paymentStatus
                                - total
                                - subtotal
                                - tax
                                - shipping
                                - discount
                                - currency
                                - createdAt
                                - updatedAt
                                - estimatedDelivery
                                - deliveredAt
                                - shippingAddress
                                - billingAddress
                                - store
                                - items
                    required:
                        - order
            required:
                - message
                - data
        CustomerOrderIdParam:
            type: object
            properties:
                orderId:
                    type: string
                    description: 'Order ID'
            required:
                - orderId
        CustomerOrderListResponse:
            type: object
            properties:
                message:
                    type: string
                data:
                    type: object
                    properties:
                        orders:
                            type: array
                            items:
                                type: object
                                properties:
                                    id: {type: string}
                                    status: {type: string}
                                    paymentStatus: {type: string}
                                    total: {type: number}
                                    createdAt: {type: string, format: date}
                                    updatedAt: {type: [string, 'null'], format: date}
                                    store: {type: object, properties: {id: {type: string}, name: {type: string}}, required: [id, name]}
                                    items: {type: array, items: {type: object, properties: {id: {type: string}, productId: {type: string}, quantity: {type: number}, price: {type: number}, product: {type: object, properties: {id: {type: string}, name: {type: string}, imageUrl: {type: string}}, required: [id, name, imageUrl]}}, required: [id, productId, quantity, price, product]}}
                                required:
                                    - id
                                    - status
                                    - paymentStatus
                                    - total
                                    - createdAt
                                    - updatedAt
                                    - store
                                    - items
                        pagination:
                            type: object
                            properties:
                                page:
                                    type: number
                                limit:
                                    type: number
                                total:
                                    type: number
                                totalPages:
                                    type: number
                            required:
                                - page
                                - limit
                                - total
                                - totalPages
                    required:
                        - orders
                        - pagination
            required:
                - message
                - data
        CustomerOrderQuery:
            type: object
            properties:
                q:
                    type: string
                    description: 'Search query'
                page:
                    type: string
                    pattern: ^\d+$
                    default: '1'
                    description: '1-based page number'
                limit:
                    type: string
                    pattern: ^\d+$
                    default: '20'
                    description: 'Number of items per page'
                status:
                    type: string
                    enum:
                        - PENDING
                        - PROCESSING
                        - SHIPPED
                        - DELIVERED
                        - CANCELLED
                    description: 'Filter orders by status'
        CustomerOrderResponse:
            type: object
            properties:
                id:
                    type: string
                status:
                    type: string
                paymentStatus:
                    type: string
                total:
                    type: number
                createdAt:
                    type: string
                    format: date
                updatedAt:
                    type:
                        - string
                        - 'null'
                    format: date
                store:
                    type: object
                    properties:
                        id:
                            type: string
                        name:
                            type: string
                    required:
                        - id
                        - name
                items:
                    type: array
                    items:
                        type: object
                        properties:
                            id:
                                type: string
                            productId:
                                type: string
                            quantity:
                                type: number
                            price:
                                type: number
                            product:
                                type: object
                                properties:
                                    id: {type: string}
                                    name: {type: string}
                                    imageUrl: {type: string}
                                required:
                                    - id
                                    - name
                                    - imageUrl
                        required:
                            - id
                            - productId
                            - quantity
                            - price
                            - product
            required:
                - id
                - status
                - paymentStatus
                - total
                - createdAt
                - updatedAt
                - store
                - items
        CustomerStatsResponse:
            type: object
            properties:
                message:
                    type: string
                data:
                    type: object
                    properties:
                        totalOrders:
                            type: number
                        totalSpent:
                            type: number
                        averageOrderValue:
                            type: number
                        ordersThisMonth:
                            type: number
                    required:
                        - totalOrders
                        - totalSpent
                        - averageOrderValue
                        - ordersThisMonth
            required:
                - message
                - data
        ErrorResponse:
            type: object
            properties:
                message:
                    type: string
                error:
                    type: string
            required:
                - message
        FulfillmentTrackingQuery:
            type: object
            properties:
                orderId:
                    type: string
                trackingNumber:
                    type: string
                carrier:
                    type: string
                estimatedDelivery:
                    type: string
                currentLocation:
                    type: string
                status:
                    type: string
                    enum:
                        - PICKED_UP
                        - IN_TRANSIT
                        - OUT_FOR_DELIVERY
                        - DELIVERED
            required:
                - orderId
        FulfillmentTrackingResponse:
            type: object
            properties:
                orderId:
                    type: string
                trackingNumber:
                    type: string
                carrier:
                    type: string
                status:
                    type: string
                estimatedDelivery:
                    type: string
                currentLocation:
                    type: string
                trackingHistory:
                    type: array
                    items:
                        type: object
                        properties:
                            status:
                                type: string
                            location:
                                type: string
                            timestamp:
                                type: string
                            description:
                                type: string
                        required:
                            - status
                            - timestamp
                            - description
                lastUpdated:
                    type: string
            required:
                - orderId
                - status
                - trackingHistory
                - lastUpdated
        IDParam:
            type: object
            properties:
                id:
                    type: string
                    description: 'Resource ID'
            required:
                - id
        InitializePaymentBody:
            type: object
            properties:
                orderId:
                    type: string
                    minLength: 1
                email:
                    type: string
                    format: email
                amount:
                    type: number
                    exclusiveMinimum: 0
                callbackUrl:
                    type: string
                    format: uri
                metadata:
                    type: object
                    additionalProperties: {}
            required:
                - orderId
                - email
                - amount
        LoginBody:
            type: object
            properties:
                email:
                    type: string
                    format: email
                password:
                    type: string
                    minLength: 8
            required:
                - email
                - password
        MarkAllNotificationsReadResponse:
            type: object
            properties:
                message:
                    type: string
                data:
                    type: object
                    properties:
                        updatedCount:
                            type: number
                    required:
                        - updatedCount
            required:
                - message
                - data
        MarkNotificationReadRequest:
            type: object
            properties:
                notificationId:
                    type: string
            required:
                - notificationId
        MarkNotificationReadResponse:
            type: object
            properties:
                message:
                    type: string
                data:
                    type: object
                    properties:
                        notification:
                            type: object
                            properties:
                                id:
                                    type: string
                                userId:
                                    type: string
                                type:
                                    type: string
                                title:
                                    type: string
                                message:
                                    type: string
                                isRead:
                                    type: boolean
                                metadata:
                                    type: [object, 'null']
                                    additionalProperties: {type: string}
                                createdAt:
                                    type: string
                                    format: date
                                updatedAt:
                                    type: [string, 'null']
                                    format: date
                            required:
                                - id
                                - userId
                                - type
                                - title
                                - message
                                - isRead
                                - metadata
                                - createdAt
                                - updatedAt
                    required:
                        - notification
            required:
                - message
                - data
        MeResponse:
            type: object
            properties:
                user:
                    type: object
                    properties:
                        id:
                            type: string
                        email:
                            type: string
                            format: email
                        role:
                            type: string
                            enum:
                                - CUSTOMER
                                - VENDOR
                                - ADMIN
                                - SUPER
                        storeId:
                            type:
                                - string
                                - 'null'
                        firstName:
                            type:
                                - string
                                - 'null'
                        lastName:
                            type:
                                - string
                                - 'null'
                        phone:
                            type:
                                - string
                                - 'null'
                        createdAt:
                            type: string
                            format: date
                        updatedAt:
                            type:
                                - string
                                - 'null'
                            format: date
                    required:
                        - id
                        - email
                        - role
                        - storeId
                        - firstName
                        - lastName
                        - phone
                        - createdAt
                        - updatedAt
            required:
                - user
        NotificationErrorResponse:
            type: object
            properties:
                message:
                    type: string
                error:
                    type: string
            required:
                - message
        NotificationIdParam:
            type: object
            properties:
                notificationId:
                    type: string
                    description: 'Notification ID'
            required:
                - notificationId
        NotificationListResponse:
            type: object
            properties:
                message:
                    type: string
                data:
                    type: object
                    properties:
                        notifications:
                            type: array
                            items:
                                type: object
                                properties:
                                    id: {type: string}
                                    userId: {type: string}
                                    type: {type: string}
                                    title: {type: string}
                                    message: {type: string}
                                    isRead: {type: boolean}
                                    metadata: {type: [object, 'null'], additionalProperties: {type: string}}
                                    createdAt: {type: string, format: date}
                                    updatedAt: {type: [string, 'null'], format: date}
                                required:
                                    - id
                                    - userId
                                    - type
                                    - title
                                    - message
                                    - isRead
                                    - metadata
                                    - createdAt
                                    - updatedAt
                        pagination:
                            type: object
                            properties:
                                page:
                                    type: number
                                limit:
                                    type: number
                                total:
                                    type: number
                                totalPages:
                                    type: number
                            required:
                                - page
                                - limit
                                - total
                                - totalPages
                    required:
                        - notifications
                        - pagination
            required:
                - message
                - data
        NotificationResponse:
            type: object
            properties:
                id:
                    type: string
                userId:
                    type: string
                type:
                    type: string
                title:
                    type: string
                message:
                    type: string
                isRead:
                    type: boolean
                metadata:
                    type:
                        - object
                        - 'null'
                    additionalProperties:
                        type: string
                createdAt:
                    type: string
                    format: date
                updatedAt:
                    type:
                        - string
                        - 'null'
                    format: date
            required:
                - id
                - userId
                - type
                - title
                - message
                - isRead
                - metadata
                - createdAt
                - updatedAt
        OrderIdParam:
            type: object
            properties:
                orderId:
                    type: string
                    description: 'Order ID'
            required:
                - orderId
        OrderItemResponse:
            type: object
            properties:
                id:
                    type: string
                productId:
                    type: string
                quantity:
                    type: integer
                price:
                    type: integer
            required:
                - id
                - productId
                - quantity
                - price
        OrderListQuery:
            type: object
            properties:
                q:
                    type: string
                    description: 'Search query'
                page:
                    type: string
                    pattern: ^\d+$
                    default: '1'
                    description: '1-based page number'
                limit:
                    type: string
                    pattern: ^\d+$
                    default: '20'
                    description: 'Number of items per page'
                storeId:
                    type: string
                status:
                    type: string
                    enum:
                        - PENDING
                        - PROCESSING
                        - SHIPPED
                        - DELIVERED
                        - CONFIRMED
                        - CANCELLED
                        - REFUNDED
                startDate:
                    type: string
                endDate:
                    type: string
        OrderListResponse:
            type: object
            properties:
                items:
                    type: array
                    items:
                        type: object
                        properties:
                            id:
                                type: string
                            customerId:
                                type: string
                            storeId:
                                type: string
                            status:
                                type: string
                                enum:
                                    - PENDING
                                    - PROCESSING
                                    - SHIPPED
                                    - DELIVERED
                                    - CONFIRMED
                                    - CANCELLED
                                    - REFUNDED
                            paymentStatus:
                                type: string
                                enum:
                                    - UNPAID
                                    - PAID
                                    - PENDING
                                    - FAILED
                                    - REFUNDED
                                    - CANCELLED
                            total:
                                type: integer
                            subtotal:
                                type: integer
                            tax:
                                type: integer
                            shipping:
                                type: integer
                            discount:
                                type: integer
                            currency:
                                type: string
                            deliveryZone:
                                type:
                                    - string
                                    - 'null'
                            items:
                                type: array
                                items:
                                    type: object
                                    properties: {id: {type: string}, productId: {type: string}, quantity: {type: integer}, price: {type: integer}}
                                    required: [id, productId, quantity, price]
                            createdAt:
                                type: string
                                format: date
                            updatedAt:
                                type:
                                    - string
                                    - 'null'
                                format: date
                        required:
                            - id
                            - customerId
                            - storeId
                            - status
                            - paymentStatus
                            - total
                            - subtotal
                            - tax
                            - shipping
                            - discount
                            - currency
                            - deliveryZone
                            - items
                            - createdAt
                            - updatedAt
                meta:
                    type: object
                    properties:
                        total:
                            type: integer
                        page:
                            type: integer
                        pageSize:
                            type: integer
                    required:
                        - total
                        - page
                        - pageSize
            required:
                - items
                - meta
        OrderResponse:
            type: object
            properties:
                id:
                    type: string
                customerId:
                    type: string
                storeId:
                    type: string
                status:
                    type: string
                    enum:
                        - PENDING
                        - PROCESSING
                        - SHIPPED
                        - DELIVERED
                        - CONFIRMED
                        - CANCELLED
                        - REFUNDED
                paymentStatus:
                    type: string
                    enum:
                        - UNPAID
                        - PAID
                        - PENDING
                        - FAILED
                        - REFUNDED
                        - CANCELLED
                total:
                    type: integer
                subtotal:
                    type: integer
                tax:
                    type: integer
                shipping:
                    type: integer
                discount:
                    type: integer
                currency:
                    type: string
                deliveryZone:
                    type:
                        - string
                        - 'null'
                items:
                    type: array
                    items:
                        type: object
                        properties:
                            id:
                                type: string
                            productId:
                                type: string
                            quantity:
                                type: integer
                            price:
                                type: integer
                        required:
                            - id
                            - productId
                            - quantity
                            - price
                createdAt:
                    type: string
                    format: date
                updatedAt:
                    type:
                        - string
                        - 'null'
                    format: date
            required:
                - id
                - customerId
                - storeId
                - status
                - paymentStatus
                - total
                - subtotal
                - tax
                - shipping
                - discount
                - currency
                - deliveryZone
                - items
                - createdAt
                - updatedAt
        OrderStatsQuery:
            type: object
            properties:
                days:
                    type: integer
                    minimum: 1
                    maximum: 365
                    default: 30
        OrderTrackingResponse:
            type: object
            properties:
                message:
                    type: string
                data:
                    type: object
                    properties:
                        orderId:
                            type: string
                        status:
                            type: string
                        paymentStatus:
                            type: string
                        estimatedDelivery:
                            type:
                                - string
                                - 'null'
                            format: date
                        deliveredAt:
                            type:
                                - string
                                - 'null'
                            format: date
                        currentLocation:
                            type: string
                        trackingEvents:
                            type: array
                            items:
                                type: object
                                properties:
                                    eventType: {type: string}
                                    description: {type: string}
                                    timestamp: {type: string, format: date}
                                required:
                                    - eventType
                                    - description
                                    - timestamp
                        deliveryUpdates:
                            type: array
                            items:
                                type: object
                                properties:
                                    status: {type: string}
                                    location: {type: [string, 'null']}
                                    timestamp: {type: string, format: date}
                                    description: {type: string}
                                required:
                                    - status
                                    - location
                                    - timestamp
                                    - description
                    required:
                        - orderId
                        - status
                        - paymentStatus
                        - estimatedDelivery
                        - deliveredAt
                        - currentLocation
                        - trackingEvents
                        - deliveryUpdates
            required:
                - message
                - data
        PageMeta:
            type: object
            properties:
                total:
                    type: integer
                page:
                    type: integer
                pageSize:
                    type: integer
            required:
                - total
                - page
                - pageSize
        PaginationQuery:
            type: object
            properties:
                q:
                    type: string
                    description: 'Search query'
                page:
                    type: string
                    pattern: ^\d+$
                    default: '1'
                    description: '1-based page number'
                limit:
                    type: string
                    pattern: ^\d+$
                    default: '20'
                    description: 'Number of items per page'
        PaymentDetailsResponse:
            type: object
            properties:
                payment: {}
        PaymentHistoryQuery:
            type: object
            properties:
                q:
                    type: string
                    description: 'Search query'
                page:
                    type: string
                    pattern: ^\d+$
                    default: '1'
                    description: '1-based page number'
                limit:
                    type: string
                    pattern: ^\d+$
                    default: '20'
                    description: 'Number of items per page'
        PaymentHistoryResponse:
            type: object
            properties:
                payments:
                    type: array
                    items: {}
                pagination:
                    type: object
                    properties:
                        page:
                            type: number
                        limit:
                            type: number
                        total:
                            type: number
                        totalPages:
                            type: number
                    required:
                        - page
                        - limit
                        - total
                        - totalPages
            required:
                - payments
                - pagination
        PaymentIdParam:
            type: object
            properties:
                paymentId:
                    type: string
                    description: 'Payment ID'
            required:
                - paymentId
        PaymentResponse:
            type: object
            properties:
                authorizationUrl:
                    type: string
                reference:
                    type: string
            required:
                - authorizationUrl
                - reference
        PaymentVerificationResponse:
            type: object
            properties:
                status:
                    type: string
                order: {}
                payment: {}
            required:
                - status
        ProductBase:
            type: object
            properties:
                name:
                    type: string
                    minLength: 1
                price:
                    type: integer
                    minimum: 0
                stock:
                    type: integer
                    minimum: 0
                visibleMarket:
                    type: boolean
                    default: true
            required:
                - name
                - price
                - stock
        ProductCreate:
            type: object
            properties:
                name:
                    type: string
                    minLength: 1
                price:
                    type: integer
                    minimum: 0
                stock:
                    type: integer
                    minimum: 0
                visibleMarket:
                    type: boolean
                    default: true
                images:
                    type: array
                    items:
                        type: object
                        properties:
                            fileName:
                                type: string
                                minLength: 1
                            fileUrl:
                                type: string
                                format: uri
                            altText:
                                type: string
                            isPrimary:
                                type: boolean
                                default: false
                            sortOrder:
                                type: integer
                                minimum: 0
                                default: 0
                        required:
                            - fileName
                            - fileUrl
            required:
                - name
                - price
                - stock
        ProductIdParam:
            type: object
            properties:
                id:
                    type: string
                    description: 'Product ID'
            required:
                - id
        ProductImageBase:
            type: object
            properties:
                fileName:
                    type: string
                    minLength: 1
                fileUrl:
                    type: string
                    format: uri
                altText:
                    type: string
                isPrimary:
                    type: boolean
                    default: false
                sortOrder:
                    type: integer
                    minimum: 0
                    default: 0
            required:
                - fileName
                - fileUrl
        ProductImageCreate:
            type: object
            properties:
                fileName:
                    type: string
                    minLength: 1
                fileUrl:
                    type: string
                    format: uri
                altText:
                    type: string
                isPrimary:
                    type: boolean
                    default: false
                sortOrder:
                    type: integer
                    minimum: 0
                    default: 0
            required:
                - fileName
                - fileUrl
        ProductImageIdParam:
            type: object
            properties:
                productId:
                    type: string
                imageId:
                    type: string
            required:
                - productId
                - imageId
        ProductImageReorderRequest:
            type: object
            properties:
                imageIds:
                    type: array
                    items:
                        type: string
                    minItems: 1
            required:
                - imageIds
        ProductImageResponse:
            type: object
            properties:
                fileName:
                    type: string
                    minLength: 1
                fileUrl:
                    type: string
                    format: uri
                altText:
                    type: string
                isPrimary:
                    type: boolean
                    default: false
                sortOrder:
                    type: integer
                    minimum: 0
                    default: 0
                id:
                    type: string
                productId:
                    type: string
                createdAt:
                    type: string
                    format: date-time
            required:
                - fileName
                - fileUrl
                - id
                - productId
                - createdAt
        ProductImageUpdate:
            type: object
            properties:
                fileName:
                    type: string
                    minLength: 1
                fileUrl:
                    type: string
                    format: uri
                altText:
                    type: string
                isPrimary:
                    type: boolean
                    default: false
                sortOrder:
                    type: integer
                    minimum: 0
                    default: 0
        ProductListQuery:
            type: object
            properties:
                q:
                    type: string
                    description: 'Search query'
                page:
                    type: string
                    pattern: ^\d+$
                    default: '1'
                    description: '1-based page number'
                limit:
                    type: string
                    pattern: ^\d+$
                    default: '20'
                    description: 'Number of items per page'
        ProductListResponse:
            type: object
            properties:
                items:
                    type: array
                    items:
                        type: object
                        properties:
                            name:
                                type: string
                                minLength: 1
                            price:
                                type: integer
                                minimum: 0
                            stock:
                                type: integer
                                minimum: 0
                            visibleMarket:
                                type: boolean
                                default: true
                            id:
                                type: string
                            storeId:
                                type: string
                            imageUrl:
                                type: string
                            images:
                                type: array
                                items:
                                    type: object
                                    properties: {fileName: {type: string, minLength: 1}, fileUrl: {type: string, format: uri}, altText: {type: string}, isPrimary: {type: boolean, default: false}, sortOrder: {type: integer, minimum: 0, default: 0}, id: {type: string}, productId: {type: string}, createdAt: {type: string, format: date-time}}
                                    required: [fileName, fileUrl, id, productId, createdAt]
                            store:
                                type: object
                                properties:
                                    id: {type: string}
                                    name: {type: string}
                                    slug: {type: string}
                                required:
                                    - id
                                    - name
                                    - slug
                        required:
                            - name
                            - price
                            - stock
                            - id
                            - storeId
                            - imageUrl
                meta:
                    type: object
                    properties:
                        total:
                            type: integer
                        page:
                            type: integer
                        pageSize:
                            type: integer
                    required:
                        - total
                        - page
                        - pageSize
            required:
                - items
                - meta
        ProductResponse:
            type: object
            properties:
                name:
                    type: string
                    minLength: 1
                price:
                    type: integer
                    minimum: 0
                stock:
                    type: integer
                    minimum: 0
                visibleMarket:
                    type: boolean
                    default: true
                id:
                    type: string
                storeId:
                    type: string
                imageUrl:
                    type: string
                images:
                    type: array
                    items:
                        type: object
                        properties:
                            fileName:
                                type: string
                                minLength: 1
                            fileUrl:
                                type: string
                                format: uri
                            altText:
                                type: string
                            isPrimary:
                                type: boolean
                                default: false
                            sortOrder:
                                type: integer
                                minimum: 0
                                default: 0
                            id:
                                type: string
                            productId:
                                type: string
                            createdAt:
                                type: string
                                format: date-time
                        required:
                            - fileName
                            - fileUrl
                            - id
                            - productId
                            - createdAt
                store:
                    type: object
                    properties:
                        id:
                            type: string
                        name:
                            type: string
                        slug:
                            type: string
                    required:
                        - id
                        - name
                        - slug
            required:
                - name
                - price
                - stock
                - id
                - storeId
                - imageUrl
        ProductSearchQuery:
            type: object
            properties:
                q:
                    type: string
                category:
                    type: string
                storeId:
                    type: string
                page:
                    type: string
                    pattern: ^\d+$
                limit:
                    type: string
                    pattern: ^\d+$
        ProductUpdate:
            type: object
            properties:
                name:
                    type: string
                    minLength: 1
                price:
                    type: integer
                    minimum: 0
                stock:
                    type: integer
                    minimum: 0
                visibleMarket:
                    type: boolean
                    default: true
                images:
                    type: array
                    items:
                        type: object
                        properties:
                            fileName:
                                type: string
                                minLength: 1
                            fileUrl:
                                type: string
                                format: uri
                            altText:
                                type: string
                            isPrimary:
                                type: boolean
                                default: false
                            sortOrder:
                                type: integer
                                minimum: 0
                                default: 0
                        required:
                            - fileName
                            - fileUrl
        RefreshBody:
            type: object
            properties:
                refreshToken:
                    type: string
            required:
                - refreshToken
        RefundPaymentBody:
            type: object
            properties:
                reason:
                    type: string
                    minLength: 1
            required:
                - reason
        RefundResponse:
            type: object
            properties:
                message:
                    type: string
                payment: {}
            required:
                - message
        RegisterBody:
            type: object
            properties:
                email:
                    type: string
                    format: email
                password:
                    type: string
                    minLength: 8
                role:
                    type: string
                    enum:
                        - CUSTOMER
                        - VENDOR
                        - ADMIN
                        - SUPER
                    default: CUSTOMER
                firstName:
                    type: string
                lastName:
                    type: string
                phone:
                    type: string
            required:
                - email
                - password
        SlugParam:
            type: object
            properties:
                slug:
                    type: string
                    description: 'Resource slug'
            required:
                - slug
        StoreCreate:
            type: object
            properties:
                name:
                    type: string
                    minLength: 1
                slug:
                    type: string
                    pattern: '^[a-z0-9-]+$'
                logoUrl:
                    type: string
                    format: uri
            required:
                - name
                - slug
        StoreListQuery:
            type: object
            properties:
                q:
                    type: string
                    description: 'Search query'
                page:
                    type: string
                    pattern: ^\d+$
                    default: '1'
                    description: '1-based page number'
                limit:
                    type: string
                    pattern: ^\d+$
                    default: '20'
                    description: 'Number of items per page'
        StoreListResponse:
            type: object
            properties:
                items:
                    type: array
                    items:
                        type: object
                        properties:
                            id:
                                type: string
                            ownerId:
                                type: string
                            name:
                                type: string
                            slug:
                                type: string
                            logoUrl:
                                type:
                                    - string
                                    - 'null'
                            owner:
                                type: object
                                properties:
                                    id: {type: string}
                                    email: {type: string}
                                required:
                                    - id
                                    - email
                        required:
                            - id
                            - ownerId
                            - name
                            - slug
                            - logoUrl
                meta:
                    type: object
                    properties:
                        total:
                            type: integer
                        page:
                            type: integer
                        pageSize:
                            type: integer
                    required:
                        - total
                        - page
                        - pageSize
            required:
                - items
                - meta
        StoreResponse:
            type: object
            properties:
                id:
                    type: string
                ownerId:
                    type: string
                name:
                    type: string
                slug:
                    type: string
                logoUrl:
                    type:
                        - string
                        - 'null'
                owner:
                    type: object
                    properties:
                        id:
                            type: string
                        email:
                            type: string
                    required:
                        - id
                        - email
            required:
                - id
                - ownerId
                - name
                - slug
                - logoUrl
        StoreSearchQuery:
            type: object
            properties:
                q:
                    type: string
                page:
                    type: string
                    pattern: ^\d+$
                limit:
                    type: string
                    pattern: ^\d+$
        StoreSlugParam:
            type: object
            properties:
                slug:
                    type: string
                    description: 'Resource slug'
            required:
                - slug
        StoreUpdate:
            type: object
            properties:
                name:
                    type: string
                    minLength: 1
                slug:
                    type: string
                    pattern: '^[a-z0-9-]+$'
                logoUrl:
                    type: string
                    format: uri
        UnreadCountResponse:
            type: object
            properties:
                message:
                    type: string
                data:
                    type: object
                    properties:
                        unreadCount:
                            type: number
                    required:
                        - unreadCount
            required:
                - message
                - data
        UpdateCartItemBody:
            type: object
            properties:
                quantity:
                    type: integer
                    exclusiveMinimum: 0
                    maximum: 100
            required:
                - quantity
        UpdateOrderStatusBody:
            type: object
            properties:
                status:
                    type: string
                    enum:
                        - PENDING
                        - PROCESSING
                        - SHIPPED
                        - DELIVERED
                        - CONFIRMED
                        - CANCELLED
                        - REFUNDED
                reason:
                    type: string
            required:
                - status
        UpdateUserBody:
            type: object
            properties:
                firstName:
                    type: string
                lastName:
                    type: string
                phone:
                    type: string
        UserIdParam:
            type: object
            properties:
                id:
                    type: string
                    description: 'Resource ID'
            required:
                - id
        UserResponse:
            type: object
            properties:
                id:
                    type: string
                email:
                    type: string
                    format: email
                role:
                    type: string
                    enum:
                        - CUSTOMER
                        - VENDOR
                        - ADMIN
                        - SUPER
                storeId:
                    type:
                        - string
                        - 'null'
                firstName:
                    type:
                        - string
                        - 'null'
                lastName:
                    type:
                        - string
                        - 'null'
                phone:
                    type:
                        - string
                        - 'null'
                createdAt:
                    type: string
                    format: date
                updatedAt:
                    type:
                        - string
                        - 'null'
                    format: date
            required:
                - id
                - email
                - role
                - storeId
                - firstName
                - lastName
                - phone
                - createdAt
                - updatedAt
        VendorAnalyticsQuery:
            type: object
            properties:
                period:
                    type: string
                    enum:
                        - 7d
                        - 30d
                        - 90d
                        - 1y
                        - all
                    default: 30d
                startDate:
                    type: string
                endDate:
                    type: string
        VendorAnalyticsResponse:
            type: object
            properties:
                period:
                    type: string
                revenue:
                    type: object
                    properties:
                        total:
                            type: number
                        average:
                            type: number
                        growth:
                            type: number
                        byDay:
                            type: array
                            items:
                                type: object
                                properties:
                                    date: {type: string}
                                    amount: {type: number}
                                required:
                                    - date
                                    - amount
                    required:
                        - total
                        - average
                        - growth
                        - byDay
                orders:
                    type: object
                    properties:
                        total:
                            type: number
                        average:
                            type: number
                        growth:
                            type: number
                        byStatus:
                            type: array
                            items:
                                type: object
                                properties:
                                    status: {type: string}
                                    count: {type: number}
                                    percentage: {type: number}
                                required:
                                    - status
                                    - count
                                    - percentage
                    required:
                        - total
                        - average
                        - growth
                        - byStatus
                products:
                    type: object
                    properties:
                        total:
                            type: number
                        active:
                            type: number
                        lowStock:
                            type: number
                        outOfStock:
                            type: number
                        bestSellers:
                            type: array
                            items:
                                type: object
                                properties:
                                    productId: {type: string}
                                    name: {type: string}
                                    sales: {type: number}
                                    revenue: {type: number}
                                required:
                                    - productId
                                    - name
                                    - sales
                                    - revenue
                    required:
                        - total
                        - active
                        - lowStock
                        - outOfStock
                        - bestSellers
                customers:
                    type: object
                    properties:
                        total:
                            type: number
                        new:
                            type: number
                        returning:
                            type: number
                        averageOrderValue:
                            type: number
                    required:
                        - total
                        - new
                        - returning
                        - averageOrderValue
                performance:
                    type: object
                    properties:
                        fulfillmentRate:
                            type: number
                        averageFulfillmentTime:
                            type: number
                        customerSatisfaction:
                            type: number
                        orderAccuracy:
                            type: number
                        responseTime:
                            type: number
                        totalOrders:
                            type: number
                        completedOrders:
                            type: number
                        cancelledOrders:
                            type: number
                        refundRate:
                            type: number
                        averageOrderValue:
                            type: number
                        topProducts:
                            type: array
                            items:
                                type: object
                                properties:
                                    productId: {type: string}
                                    name: {type: string}
                                    salesCount: {type: number}
                                    revenue: {type: number}
                                required:
                                    - productId
                                    - name
                                    - salesCount
                                    - revenue
                        performanceTrends:
                            type: array
                            items:
                                type: object
                                properties:
                                    date: {type: string}
                                    orders: {type: number}
                                    revenue: {type: number}
                                    fulfillmentRate: {type: number}
                                required:
                                    - date
                                    - orders
                                    - revenue
                                    - fulfillmentRate
                    required:
                        - fulfillmentRate
                        - averageFulfillmentTime
                        - customerSatisfaction
                        - orderAccuracy
                        - responseTime
                        - totalOrders
                        - completedOrders
                        - cancelledOrders
                        - refundRate
                        - averageOrderValue
                        - topProducts
                        - performanceTrends
            required:
                - period
                - revenue
                - orders
                - products
                - customers
                - performance
        VendorPerformanceMetrics:
            type: object
            properties:
                fulfillmentRate:
                    type: number
                averageFulfillmentTime:
                    type: number
                customerSatisfaction:
                    type: number
                orderAccuracy:
                    type: number
                responseTime:
                    type: number
                totalOrders:
                    type: number
                completedOrders:
                    type: number
                cancelledOrders:
                    type: number
                refundRate:
                    type: number
                averageOrderValue:
                    type: number
                topProducts:
                    type: array
                    items:
                        type: object
                        properties:
                            productId:
                                type: string
                            name:
                                type: string
                            salesCount:
                                type: number
                            revenue:
                                type: number
                        required:
                            - productId
                            - name
                            - salesCount
                            - revenue
                performanceTrends:
                    type: array
                    items:
                        type: object
                        properties:
                            date:
                                type: string
                            orders:
                                type: number
                            revenue:
                                type: number
                            fulfillmentRate:
                                type: number
                        required:
                            - date
                            - orders
                            - revenue
                            - fulfillmentRate
            required:
                - fulfillmentRate
                - averageFulfillmentTime
                - customerSatisfaction
                - orderAccuracy
                - responseTime
                - totalOrders
                - completedOrders
                - cancelledOrders
                - refundRate
                - averageOrderValue
                - topProducts
                - performanceTrends
        VendorPerformanceQuery:
            type: object
            properties:
                days:
                    type: number
                    minimum: 1
                    maximum: 365
                    default: 30
                includeDetails:
                    type: boolean
                    default: false
        VendorRatingSchema:
            type: object
            properties:
                orderId:
                    type: string
                rating:
                    type: number
                    minimum: 1
                    maximum: 5
                review:
                    type: string
                    minLength: 10
                    maxLength: 500
                categories:
                    type: array
                    items:
                        type: string
                        enum:
                            - QUALITY
                            - DELIVERY
                            - COMMUNICATION
                            - PRICE
            required:
                - orderId
                - rating
        VerifyPaymentBody:
            type: object
            properties:
                reference:
                    type: string
                    minLength: 1
            required:
                - reference
        WebhookResponse:
            type: object
            properties:
                message:
                    type: string
            required:
                - message
    parameters: {}
paths:
    /auth/register:
        post:
            tags:
                - Auth
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    format: email
                                password:
                                    type: string
                                    minLength: 8
                                role:
                                    type: string
                                    enum: [CUSTOMER, VENDOR, ADMIN, SUPER]
                                    default: CUSTOMER
                                firstName:
                                    type: string
                                lastName:
                                    type: string
                                phone:
                                    type: string
                            required:
                                - email
                                - password
            responses:
                '201':
                    description: 'User registered successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    accessToken: {type: string}
                                    refreshToken: {type: string}
                                    user: {type: object, properties: {id: {type: string}, email: {type: string, format: email}, role: {type: string, enum: [CUSTOMER, VENDOR, ADMIN, SUPER]}, storeId: {type: [string, 'null']}, firstName: {type: [string, 'null']}, lastName: {type: [string, 'null']}, phone: {type: [string, 'null']}, createdAt: {type: string, format: date}, updatedAt: {type: [string, 'null'], format: date}}, required: [id, email, role, storeId, firstName, lastName, phone, createdAt, updatedAt]}
                                required:
                                    - accessToken
                                    - refreshToken
                                    - user
                '409':
                    description: 'Email already in use'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    accessToken: {type: string}
                                    refreshToken: {type: string}
                                    user: {type: object, properties: {id: {type: string}, email: {type: string, format: email}, role: {type: string, enum: [CUSTOMER, VENDOR, ADMIN, SUPER]}, storeId: {type: [string, 'null']}, firstName: {type: [string, 'null']}, lastName: {type: [string, 'null']}, phone: {type: [string, 'null']}, createdAt: {type: string, format: date}, updatedAt: {type: [string, 'null'], format: date}}, required: [id, email, role, storeId, firstName, lastName, phone, createdAt, updatedAt]}
                                required:
                                    - accessToken
                                    - refreshToken
                                    - user
    /auth/login:
        post:
            tags:
                - Auth
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    format: email
                                password:
                                    type: string
                                    minLength: 8
                            required:
                                - email
                                - password
            responses:
                '201':
                    description: 'User logged in successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    accessToken: {type: string}
                                    refreshToken: {type: string}
                                    user: {type: object, properties: {id: {type: string}, email: {type: string, format: email}, role: {type: string, enum: [CUSTOMER, VENDOR, ADMIN, SUPER]}, storeId: {type: [string, 'null']}, firstName: {type: [string, 'null']}, lastName: {type: [string, 'null']}, phone: {type: [string, 'null']}, createdAt: {type: string, format: date}, updatedAt: {type: [string, 'null'], format: date}}, required: [id, email, role, storeId, firstName, lastName, phone, createdAt, updatedAt]}
                                required:
                                    - accessToken
                                    - refreshToken
                                    - user
    /auth/refresh:
        post:
            tags:
                - Auth
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                refreshToken:
                                    type: string
                            required:
                                - refreshToken
            responses:
                '200':
                    description: 'Token refreshed successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    accessToken: {type: string}
                                    refreshToken: {type: string}
                                    user: {type: object, properties: {id: {type: string}, email: {type: string, format: email}, role: {type: string, enum: [CUSTOMER, VENDOR, ADMIN, SUPER]}, storeId: {type: [string, 'null']}, firstName: {type: [string, 'null']}, lastName: {type: [string, 'null']}, phone: {type: [string, 'null']}, createdAt: {type: string, format: date}, updatedAt: {type: [string, 'null'], format: date}}, required: [id, email, role, storeId, firstName, lastName, phone, createdAt, updatedAt]}
                                required:
                                    - accessToken
                                    - refreshToken
                                    - user
    /auth/users:
        get:
            tags:
                - Auth
            responses:
                '200':
                    description: 'List of all users'
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties: {id: {type: string}, email: {type: string}, role: {type: string}, storeId: {type: [string, 'null']}, firstName: {type: [string, 'null']}, lastName: {type: [string, 'null']}, phone: {type: [string, 'null']}, createdAt: {type: string, format: date-time}, updatedAt: {type: [string, 'null'], format: date-time}}
    /auth/me:
        get:
            tags:
                - Auth
            security:
                -
                    bearerAuth: []
            responses:
                '200':
                    description: 'Current user profile retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    user: {type: object, properties: {id: {type: string}, email: {type: string, format: email}, role: {type: string, enum: [CUSTOMER, VENDOR, ADMIN, SUPER]}, storeId: {type: [string, 'null']}, firstName: {type: [string, 'null']}, lastName: {type: [string, 'null']}, phone: {type: [string, 'null']}, createdAt: {type: string, format: date}, updatedAt: {type: [string, 'null'], format: date}}, required: [id, email, role, storeId, firstName, lastName, phone, createdAt, updatedAt]}
                                required:
                                    - user
                '401':
                    description: 'Authentication required'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '404':
                    description: 'User not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
        patch:
            tags:
                - Auth
            security:
                -
                    bearerAuth: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                firstName:
                                    type: string
                                lastName:
                                    type: string
                                phone:
                                    type: string
            responses:
                '200':
                    description: 'User profile updated successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    user: {type: object, properties: {id: {type: string}, email: {type: string, format: email}, role: {type: string, enum: [CUSTOMER, VENDOR, ADMIN, SUPER]}, storeId: {type: [string, 'null']}, firstName: {type: [string, 'null']}, lastName: {type: [string, 'null']}, phone: {type: [string, 'null']}, createdAt: {type: string, format: date}, updatedAt: {type: [string, 'null'], format: date}}, required: [id, email, role, storeId, firstName, lastName, phone, createdAt, updatedAt]}
                                required:
                                    - user
                '400':
                    description: 'Invalid request data'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '401':
                    description: 'Authentication required'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '404':
                    description: 'User not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    /products:
        get:
            tags:
                - catalogue
            parameters:
                -
                    schema:
                        type: string
                    required: false
                    name: q
                    in: query
                -
                    schema:
                        type: string
                    required: false
                    name: category
                    in: query
                -
                    schema:
                        type: string
                    required: false
                    name: storeId
                    in: query
                -
                    schema:
                        type: string
                        pattern: ^\d+$
                    required: false
                    name: page
                    in: query
                -
                    schema:
                        type: string
                        pattern: ^\d+$
                    required: false
                    name: limit
                    in: query
            responses:
                '200':
                    description: 'List of products'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    items: {type: array, items: {type: object, properties: {name: {type: string, minLength: 1}, price: {type: integer, minimum: 0}, stock: {type: integer, minimum: 0}, visibleMarket: {type: boolean, default: true}, id: {type: string}, storeId: {type: string}, imageUrl: {type: string}, images: {type: array, items: {type: object, properties: {fileName: {type: string, minLength: 1}, fileUrl: {type: string, format: uri}, altText: {type: string}, isPrimary: {type: boolean, default: false}, sortOrder: {type: integer, minimum: 0, default: 0}, id: {type: string}, productId: {type: string}, createdAt: {type: string, format: date-time}}, required: [fileName, fileUrl, id, productId, createdAt]}}, store: {type: object, properties: {id: {type: string}, name: {type: string}, slug: {type: string}}, required: [id, name, slug]}}, required: [name, price, stock, id, storeId, imageUrl]}}
                                    meta: {type: object, properties: {total: {type: integer}, page: {type: integer}, pageSize: {type: integer}}, required: [total, page, pageSize]}
                                required:
                                    - items
                                    - meta
        post:
            tags:
                - catalogue
            security:
                -
                    bearerAuth: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    minLength: 1
                                price:
                                    type: integer
                                    minimum: 0
                                stock:
                                    type: integer
                                    minimum: 0
                                visibleMarket:
                                    type: boolean
                                    default: true
                                images:
                                    type: array
                                    items: {type: object, properties: {fileName: {type: string, minLength: 1}, fileUrl: {type: string, format: uri}, altText: {type: string}, isPrimary: {type: boolean, default: false}, sortOrder: {type: integer, minimum: 0, default: 0}}, required: [fileName, fileUrl]}
                            required:
                                - name
                                - price
                                - stock
            responses:
                '201':
                    description: 'Product created successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    name: {type: string, minLength: 1}
                                    price: {type: integer, minimum: 0}
                                    stock: {type: integer, minimum: 0}
                                    visibleMarket: {type: boolean, default: true}
                                    id: {type: string}
                                    storeId: {type: string}
                                    imageUrl: {type: string}
                                    images: {type: array, items: {type: object, properties: {fileName: {type: string, minLength: 1}, fileUrl: {type: string, format: uri}, altText: {type: string}, isPrimary: {type: boolean, default: false}, sortOrder: {type: integer, minimum: 0, default: 0}, id: {type: string}, productId: {type: string}, createdAt: {type: string, format: date-time}}, required: [fileName, fileUrl, id, productId, createdAt]}}
                                    store: {type: object, properties: {id: {type: string}, name: {type: string}, slug: {type: string}}, required: [id, name, slug]}
                                required:
                                    - name
                                    - price
                                    - stock
                                    - id
                                    - storeId
                                    - imageUrl
                '401':
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '403':
                    description: 'Vendor role required - you must own a store to create products'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    '/products/{id}':
        get:
            tags:
                - catalogue
            parameters:
                -
                    schema:
                        type: string
                        description: 'Product ID'
                    required: true
                    description: 'Product ID'
                    name: id
                    in: path
            responses:
                '200':
                    description: 'Product details'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    name: {type: string, minLength: 1}
                                    price: {type: integer, minimum: 0}
                                    stock: {type: integer, minimum: 0}
                                    visibleMarket: {type: boolean, default: true}
                                    id: {type: string}
                                    storeId: {type: string}
                                    imageUrl: {type: string}
                                    images: {type: array, items: {type: object, properties: {fileName: {type: string, minLength: 1}, fileUrl: {type: string, format: uri}, altText: {type: string}, isPrimary: {type: boolean, default: false}, sortOrder: {type: integer, minimum: 0, default: 0}, id: {type: string}, productId: {type: string}, createdAt: {type: string, format: date-time}}, required: [fileName, fileUrl, id, productId, createdAt]}}
                                    store: {type: object, properties: {id: {type: string}, name: {type: string}, slug: {type: string}}, required: [id, name, slug]}
                                required:
                                    - name
                                    - price
                                    - stock
                                    - id
                                    - storeId
                                    - imageUrl
                '404':
                    description: 'Product not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
        put:
            tags:
                - catalogue
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: string
                        description: 'Product ID'
                    required: true
                    description: 'Product ID'
                    name: id
                    in: path
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    minLength: 1
                                price:
                                    type: integer
                                    minimum: 0
                                stock:
                                    type: integer
                                    minimum: 0
                                visibleMarket:
                                    type: boolean
                                    default: true
                                images:
                                    type: array
                                    items: {type: object, properties: {fileName: {type: string, minLength: 1}, fileUrl: {type: string, format: uri}, altText: {type: string}, isPrimary: {type: boolean, default: false}, sortOrder: {type: integer, minimum: 0, default: 0}}, required: [fileName, fileUrl]}
            responses:
                '200':
                    description: 'Product updated successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    name: {type: string, minLength: 1}
                                    price: {type: integer, minimum: 0}
                                    stock: {type: integer, minimum: 0}
                                    visibleMarket: {type: boolean, default: true}
                                    id: {type: string}
                                    storeId: {type: string}
                                    imageUrl: {type: string}
                                    images: {type: array, items: {type: object, properties: {fileName: {type: string, minLength: 1}, fileUrl: {type: string, format: uri}, altText: {type: string}, isPrimary: {type: boolean, default: false}, sortOrder: {type: integer, minimum: 0, default: 0}, id: {type: string}, productId: {type: string}, createdAt: {type: string, format: date-time}}, required: [fileName, fileUrl, id, productId, createdAt]}}
                                    store: {type: object, properties: {id: {type: string}, name: {type: string}, slug: {type: string}}, required: [id, name, slug]}
                                required:
                                    - name
                                    - price
                                    - stock
                                    - id
                                    - storeId
                                    - imageUrl
                '401':
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '403':
                    description: 'Access denied - you do not own this product'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '404':
                    description: 'Product not found or access denied'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
        delete:
            tags:
                - catalogue
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: string
                        description: 'Product ID'
                    required: true
                    description: 'Product ID'
                    name: id
                    in: path
            responses:
                '204':
                    description: 'Product deleted successfully'
                '401':
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '403':
                    description: 'Access denied - you do not own this product'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '404':
                    description: 'Product not found or access denied'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    /stores:
        get:
            tags:
                - catalogue
            parameters:
                -
                    schema:
                        type: string
                    required: false
                    name: q
                    in: query
                -
                    schema:
                        type: string
                        pattern: ^\d+$
                    required: false
                    name: page
                    in: query
                -
                    schema:
                        type: string
                        pattern: ^\d+$
                    required: false
                    name: limit
                    in: query
            responses:
                '200':
                    description: 'List of stores'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    items: {type: array, items: {type: object, properties: {id: {type: string}, ownerId: {type: string}, name: {type: string}, slug: {type: string}, logoUrl: {type: [string, 'null']}, owner: {type: object, properties: {id: {type: string}, email: {type: string}}, required: [id, email]}}, required: [id, ownerId, name, slug, logoUrl]}}
                                    meta: {type: object, properties: {total: {type: integer}, page: {type: integer}, pageSize: {type: integer}}, required: [total, page, pageSize]}
                                required:
                                    - items
                                    - meta
        post:
            tags:
                - catalogue
            security:
                -
                    bearerAuth: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    minLength: 1
                                slug:
                                    type: string
                                    pattern: '^[a-z0-9-]+$'
                                logoUrl:
                                    type: string
                                    format: uri
                            required:
                                - name
                                - slug
            responses:
                '201':
                    description: 'Store created successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    id: {type: string}
                                    ownerId: {type: string}
                                    name: {type: string}
                                    slug: {type: string}
                                    logoUrl: {type: [string, 'null']}
                                    owner: {type: object, properties: {id: {type: string}, email: {type: string}}, required: [id, email]}
                                required:
                                    - id
                                    - ownerId
                                    - name
                                    - slug
                                    - logoUrl
                '401':
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '409':
                    description: 'You already own a store or store slug already exists'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    '/stores/{slug}':
        get:
            tags:
                - catalogue
            parameters:
                -
                    schema:
                        type: string
                        description: 'Resource slug'
                    required: true
                    description: 'Resource slug'
                    name: slug
                    in: path
            responses:
                '200':
                    description: 'Store details'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    id: {type: string}
                                    ownerId: {type: string}
                                    name: {type: string}
                                    slug: {type: string}
                                    logoUrl: {type: [string, 'null']}
                                    owner: {type: object, properties: {id: {type: string}, email: {type: string}}, required: [id, email]}
                                required:
                                    - id
                                    - ownerId
                                    - name
                                    - slug
                                    - logoUrl
                '404':
                    description: 'Store not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
        put:
            tags:
                - catalogue
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: string
                        description: 'Resource slug'
                    required: true
                    description: 'Resource slug'
                    name: slug
                    in: path
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    minLength: 1
                                slug:
                                    type: string
                                    pattern: '^[a-z0-9-]+$'
                                logoUrl:
                                    type: string
                                    format: uri
            responses:
                '200':
                    description: 'Store updated successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    id: {type: string}
                                    ownerId: {type: string}
                                    name: {type: string}
                                    slug: {type: string}
                                    logoUrl: {type: [string, 'null']}
                                    owner: {type: object, properties: {id: {type: string}, email: {type: string}}, required: [id, email]}
                                required:
                                    - id
                                    - ownerId
                                    - name
                                    - slug
                                    - logoUrl
                '401':
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '403':
                    description: 'Access denied - you do not own this store'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '404':
                    description: 'Store not found or access denied'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '409':
                    description: 'Store slug already exists'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
        delete:
            tags:
                - catalogue
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: string
                        description: 'Resource slug'
                    required: true
                    description: 'Resource slug'
                    name: slug
                    in: path
            responses:
                '204':
                    description: 'Store deleted successfully'
                '401':
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '403':
                    description: 'Access denied - you do not own this store'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '404':
                    description: 'Store not found or access denied'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    '/stores/{slug}/products':
        get:
            tags:
                - catalogue
            parameters:
                -
                    schema:
                        type: string
                        description: 'Resource slug'
                    required: true
                    description: 'Resource slug'
                    name: slug
                    in: path
                -
                    schema:
                        type: string
                    required: false
                    name: q
                    in: query
                -
                    schema:
                        type: string
                    required: false
                    name: category
                    in: query
                -
                    schema:
                        type: string
                    required: false
                    name: storeId
                    in: query
                -
                    schema:
                        type: string
                        pattern: ^\d+$
                    required: false
                    name: page
                    in: query
                -
                    schema:
                        type: string
                        pattern: ^\d+$
                    required: false
                    name: limit
                    in: query
            responses:
                '200':
                    description: 'Products from a specific store'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    items: {type: array, items: {type: object, properties: {name: {type: string, minLength: 1}, price: {type: integer, minimum: 0}, stock: {type: integer, minimum: 0}, visibleMarket: {type: boolean, default: true}, id: {type: string}, storeId: {type: string}, imageUrl: {type: string}, images: {type: array, items: {type: object, properties: {fileName: {type: string, minLength: 1}, fileUrl: {type: string, format: uri}, altText: {type: string}, isPrimary: {type: boolean, default: false}, sortOrder: {type: integer, minimum: 0, default: 0}, id: {type: string}, productId: {type: string}, createdAt: {type: string, format: date-time}}, required: [fileName, fileUrl, id, productId, createdAt]}}, store: {type: object, properties: {id: {type: string}, name: {type: string}, slug: {type: string}}, required: [id, name, slug]}}, required: [name, price, stock, id, storeId, imageUrl]}}
                                    meta: {type: object, properties: {total: {type: integer}, page: {type: integer}, pageSize: {type: integer}}, required: [total, page, pageSize]}
                                required:
                                    - items
                                    - meta
                '404':
                    description: 'Store not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    /vendor/dashboard:
        get:
            tags:
                - vendor
            responses:
                '200':
                    description: 'Vendor dashboard overview'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    store: {type: [object, 'null'], properties: {id: {type: string}, name: {type: string}, slug: {type: string}, logoUrl: {type: string}}}
                                    owner: {type: object, properties: {id: {type: string}, email: {type: string}, role: {type: string}, storeId: {type: [string, 'null']}, firstName: {type: [string, 'null']}, lastName: {type: [string, 'null']}, phone: {type: [string, 'null']}, createdAt: {type: string, format: date-time}, updatedAt: {type: [string, 'null'], format: date-time}}}
                                    stats: {type: object, properties: {totalProducts: {type: number}, lowStockProducts: {type: number}, visibleProducts: {type: number}, hiddenProducts: {type: number}, totalOrders: {type: number}, totalRevenue: {type: number}, totalItemsSold: {type: number}}}
                                    recentOrders: {type: array, items: {type: object}}
                                    message: {type: string}
                '401':
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '404':
                    description: 'Store not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    /vendor/products/stats:
        get:
            tags:
                - vendor
            responses:
                '200':
                    description: 'Vendor product statistics'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    totalProducts: {type: number}
                                    visibleProducts: {type: number}
                                    hiddenProducts: {type: number}
                                    lowStockProducts: {type: number}
                                    outOfStockProducts: {type: number}
                                    totalValue: {type: number}
                                    stockHealth: {type: object, properties: {healthy: {type: number}, lowStock: {type: number}, outOfStock: {type: number}}}
    /vendor/store:
        get:
            tags:
                - vendor
            responses:
                '200':
                    description: 'Vendor store details'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    id: {type: string}
                                    name: {type: string}
                                    slug: {type: string}
                                    logoUrl: {type: string}
                                    paystackAccountCode: {type: string}
                                    paystackAccountActive: {type: boolean}
                                    owner: {type: object, properties: {id: {type: string}, email: {type: string}, role: {type: string}}}
        put:
            tags:
                - vendor
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                slug:
                                    type: string
                                logoUrl:
                                    type: string
            responses:
                '200':
                    description: 'Store updated successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    id: {type: string}
                                    name: {type: string}
                                    slug: {type: string}
                                    logoUrl: {type: string}
                '400':
                    description: 'Bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '409':
                    description: 'Store slug already exists'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    /vendor/products:
        get:
            tags:
                - vendor
            responses:
                '200':
                    description: 'Vendor products list with sales data'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    items: {type: array, items: {type: object, properties: {id: {type: string}, name: {type: string}, price: {type: number}, stock: {type: number}, imageUrl: {type: string}, visibleMarket: {type: boolean}, storeId: {type: string}, salesData: {type: object, properties: {totalSold: {type: number}, totalRevenue: {type: number}, averagePrice: {type: number}}}}}}
                                    meta: {type: object, properties: {total: {type: number}, page: {type: number}, pageSize: {type: number}}}
                '401':
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '404':
                    description: 'Store not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    /vendor/products/best-sellers:
        get:
            tags:
                - vendor
            responses:
                '200':
                    description: 'Vendor best-selling products'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    period: {type: string}
                                    items: {type: array, items: {type: object, properties: {id: {type: string}, name: {type: string}, price: {type: number}, stock: {type: number}, imageUrl: {type: string}, visibleMarket: {type: boolean}, salesData: {type: object, properties: {totalSold: {type: number}, totalRevenue: {type: number}, averagePrice: {type: number}}}}}}
                                    meta: {type: object, properties: {total: {type: number}}}
                '401':
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '404':
                    description: 'Store not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    /vendor/analytics:
        get:
            tags:
                - vendor
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: string
                        enum:
                            - 7d
                            - 30d
                            - 90d
                            - 1y
                            - all
                        default: 30d
                    required: false
                    name: period
                    in: query
                -
                    schema:
                        type: string
                    required: false
                    name: startDate
                    in: query
                -
                    schema:
                        type: string
                    required: false
                    name: endDate
                    in: query
            responses:
                '200':
                    description: 'Vendor analytics retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    period: {type: string}
                                    revenue: {type: object, properties: {total: {type: number}, average: {type: number}, growth: {type: number}, byDay: {type: array, items: {type: object, properties: {date: {type: string}, amount: {type: number}}}}}}
                                    orders: {type: object, properties: {total: {type: number}, average: {type: number}, growth: {type: number}, byStatus: {type: array, items: {type: object, properties: {status: {type: string}, count: {type: number}, percentage: {type: number}}}}}}
                                    products: {type: object, properties: {total: {type: number}, active: {type: number}, lowStock: {type: number}, outOfStock: {type: number}, bestSellers: {type: array, items: {type: object, properties: {productId: {type: string}, name: {type: string}, sales: {type: number}, revenue: {type: number}}}}}}
                                    customers: {type: object, properties: {total: {type: number}, new: {type: number}, returning: {type: number}, averageOrderValue: {type: number}}}
                                    performance: {type: object, properties: {fulfillmentRate: {type: number}, averageFulfillmentTime: {type: number}, customerSatisfaction: {type: number}, orderAccuracy: {type: number}, responseTime: {type: number}, totalOrders: {type: number}, completedOrders: {type: number}, cancelledOrders: {type: number}, refundRate: {type: number}, averageOrderValue: {type: number}}}
                '401':
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    /vendor/performance:
        get:
            tags:
                - vendor
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: number
                        minimum: 1
                        maximum: 365
                        default: 30
                    required: false
                    name: days
                    in: query
                -
                    schema:
                        type: boolean
                        default: false
                    required: false
                    name: includeDetails
                    in: query
            responses:
                '200':
                    description: 'Vendor performance metrics retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    fulfillmentRate: {type: number}
                                    averageFulfillmentTime: {type: number}
                                    customerSatisfaction: {type: number}
                                    orderAccuracy: {type: number}
                                    responseTime: {type: number}
                                    totalOrders: {type: number}
                                    completedOrders: {type: number}
                                    cancelledOrders: {type: number}
                                    refundRate: {type: number}
                                    averageOrderValue: {type: number}
                                    topProducts: {type: array, items: {type: object, properties: {productId: {type: string}, name: {type: string}, salesCount: {type: number}, revenue: {type: number}}}}
                                    performanceTrends: {type: array, items: {type: object, properties: {date: {type: string}, orders: {type: number}, revenue: {type: number}, fulfillmentRate: {type: number}}}}
                '401':
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    '/vendor/orders/{orderId}/tracking':
        put:
            tags:
                - vendor
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: string
                    required: true
                    name: orderId
                    in: path
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                trackingNumber:
                                    type: string
                                carrier:
                                    type: string
                                estimatedDelivery:
                                    type: string
                                currentLocation:
                                    type: string
                                status:
                                    type: string
                                    enum: [PICKED_UP, IN_TRANSIT, OUT_FOR_DELIVERY, DELIVERED]
            responses:
                '200':
                    description: 'Fulfillment tracking updated successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    tracking: {type: object, properties: {orderId: {type: string}, trackingNumber: {type: string}, carrier: {type: string}, status: {type: string}, estimatedDelivery: {type: string}, currentLocation: {type: string}, trackingHistory: {type: array, items: {type: object, properties: {status: {type: string}, location: {type: string}, timestamp: {type: string}, description: {type: string}}}}, lastUpdated: {type: string}}}
                '401':
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '403':
                    description: 'Access denied'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
        get:
            tags:
                - vendor
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: string
                    required: true
                    name: orderId
                    in: path
            responses:
                '200':
                    description: 'Fulfillment tracking retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    orderId: {type: string}
                                    trackingNumber: {type: string}
                                    carrier: {type: string}
                                    status: {type: string}
                                    estimatedDelivery: {type: string}
                                    currentLocation: {type: string}
                                    trackingHistory: {type: array, items: {type: object, properties: {status: {type: string}, location: {type: string}, timestamp: {type: string}, description: {type: string}}}}
                                    lastUpdated: {type: string}
                '401':
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '403':
                    description: 'Access denied'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    '/vendor/orders/{orderId}/picked-up':
        post:
            tags:
                - vendor
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: string
                    required: true
                    name: orderId
                    in: path
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                trackingNumber:
                                    type: string
                                carrier:
                                    type: string
            responses:
                '200':
                    description: 'Order marked as picked up successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '401':
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '403':
                    description: 'Access denied'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    '/vendor/orders/{orderId}/out-for-delivery':
        post:
            tags:
                - vendor
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: string
                    required: true
                    name: orderId
                    in: path
            responses:
                '200':
                    description: 'Order marked as out for delivery successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '401':
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '403':
                    description: 'Access denied'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    '/vendor/orders/{orderId}/delivered':
        post:
            tags:
                - vendor
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: string
                    required: true
                    name: orderId
                    in: path
            responses:
                '200':
                    description: 'Order marked as delivered successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '401':
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '403':
                    description: 'Access denied'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    /vendor/payment/account:
        post:
            tags:
                - vendor
            security:
                -
                    bearerAuth: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                vendorId:
                                    type: string
                                storeId:
                                    type: string
                                bankCode:
                                    type: string
                                accountNumber:
                                    type: string
                                accountName:
                                    type: string
                                businessName:
                                    type: string
                                businessEmail:
                                    type: string
                                businessPhone:
                                    type: string
                                businessAddress:
                                    type: string
                            required:
                                - vendorId
                                - storeId
                                - bankCode
                                - accountNumber
                                - accountName
                                - businessName
                                - businessEmail
            responses:
                '200':
                    description: 'Vendor Paystack account created successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean}
                                    message: {type: string}
                                    account: {type: object, properties: {id: {type: string}, domain: {type: string}, subaccount_code: {type: string}, business_name: {type: string}, description: {type: string}, primary_contact_name: {type: string}, primary_contact_email: {type: string}, primary_contact_phone: {type: string}, metadata: {type: object}, percentage_charge: {type: number}, settlement_bank: {type: string}, account_number: {type: string}, account_name: {type: string}, settlement_schedule: {type: string}, active: {type: boolean}, currency: {type: string}, type: {type: string}, is_verified: {type: boolean}, verification_fields: {type: array}, created_at: {type: string}, updated_at: {type: string}}}
                '400':
                    description: 'Bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '401':
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '403':
                    description: Forbidden
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    /vendor/payment/account/from-application:
        post:
            tags:
                - vendor
            security:
                -
                    bearerAuth: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties: {}
            responses:
                '200':
                    description: 'Paystack sub-account created successfully using application data'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success: {type: boolean}
                                    message: {type: string}
                                    account: {type: object, properties: {accountCode: {type: string}, accountId: {type: string}, status: {type: string}}}
                '400':
                    description: 'Bad request - Application not approved or account already exists'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '401':
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '404':
                    description: 'Vendor application or store not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    /vendor/payment/earnings:
        get:
            tags:
                - vendor
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: string
                    required: false
                    name: startDate
                    in: query
                -
                    schema:
                        type: string
                    required: false
                    name: endDate
                    in: query
                -
                    schema:
                        type: number
                        default: 1
                    required: false
                    name: page
                    in: query
                -
                    schema:
                        type: number
                        default: 20
                    required: false
                    name: perPage
                    in: query
            responses:
                '200':
                    description: 'Vendor earnings retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    totalEarnings: {type: number}
                                    totalPayouts: {type: number}
                                    pendingPayouts: {type: number}
                                    platformFees: {type: number}
                                    payouts: {type: array, items: {type: object, properties: {id: {type: string}, orderId: {type: string}, amount: {type: number}, platformFee: {type: number}, status: {type: string}, createdAt: {type: string}}}}
                '401':
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    /vendor/payment/payouts/history:
        get:
            tags:
                - vendor
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: number
                        default: 1
                    required: false
                    name: page
                    in: query
                -
                    schema:
                        type: number
                        default: 20
                    required: false
                    name: perPage
                    in: query
                -
                    schema:
                        type: string
                    required: false
                    name: status
                    in: query
                -
                    schema:
                        type: string
                    required: false
                    name: startDate
                    in: query
                -
                    schema:
                        type: string
                    required: false
                    name: endDate
                    in: query
            responses:
                '200':
                    description: 'Vendor payout history retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    payouts: {type: array, items: {type: object, properties: {id: {type: string}, orderId: {type: string}, amount: {type: number}, platformFee: {type: number}, status: {type: string}, createdAt: {type: string}, processedAt: {type: string}, order: {type: object, properties: {paymentReference: {type: string}}}}}}
                                    pagination: {type: object, properties: {page: {type: number}, perPage: {type: number}, total: {type: number}, totalPages: {type: number}}}
                '401':
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    /vendor/metrics:
        get:
            tags:
                - vendor
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: number
                        minimum: 1
                        maximum: 365
                        default: 30
                    required: false
                    name: days
                    in: query
                -
                    schema:
                        type: string
                    required: false
                    name: startDate
                    in: query
                -
                    schema:
                        type: string
                    required: false
                    name: endDate
                    in: query
            responses:
                '200':
                    description: 'Vendor metrics retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    period: {type: string}
                                    totalOrders: {type: number}
                                    totalRevenue: {type: number}
                                    byStatus: {type: array, items: {type: object, properties: {status: {type: string}, count: {type: number}, revenue: {type: number}}}}
                                    dailySales: {type: array, items: {type: object, properties: {date: {type: string}, orders: {type: number}, revenue: {type: number}}}}
    /analytics/best-sellers:
        get:
            tags:
                - analytics
            responses:
                '200':
                    description: 'Global best-selling products'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    period: {type: string}
                                    items: {type: array, items: {type: object, properties: {id: {type: string}, name: {type: string}, price: {type: number}, stock: {type: number}, imageUrl: {type: string}, store: {type: object, properties: {id: {type: string}, name: {type: string}, slug: {type: string}}}, salesData: {type: object, properties: {totalSold: {type: number}, totalRevenue: {type: number}, averagePrice: {type: number}}}}}}
                                    meta: {type: object, properties: {total: {type: number}}}
    '/analytics/stores/{slug}/best-sellers':
        get:
            tags:
                - analytics
            parameters:
                -
                    schema:
                        type: string
                        description: 'Resource slug'
                    required: true
                    description: 'Resource slug'
                    name: slug
                    in: path
            responses:
                '200':
                    description: 'Store-specific best-selling products'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    store: {type: object, properties: {id: {type: string}, name: {type: string}, slug: {type: string}}}
                                    period: {type: string}
                                    items: {type: array, items: {type: object, properties: {id: {type: string}, name: {type: string}, price: {type: number}, stock: {type: number}, imageUrl: {type: string}, salesData: {type: object, properties: {totalSold: {type: number}, totalRevenue: {type: number}, averagePrice: {type: number}}}}}}
                                    meta: {type: object, properties: {total: {type: number}}}
                '404':
                    description: 'Store not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    /analytics/featured:
        get:
            tags:
                - analytics
            responses:
                '200':
                    description: 'Featured products (best sellers from last 30 days)'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    items: {type: array, items: {type: object, properties: {id: {type: string}, name: {type: string}, price: {type: number}, stock: {type: number}, imageUrl: {type: string}, store: {type: object, properties: {id: {type: string}, name: {type: string}, slug: {type: string}}}, salesData: {type: object, properties: {totalSold: {type: number}, totalRevenue: {type: number}, averagePrice: {type: number}}}}}}
                                    meta: {type: object, properties: {total: {type: number}, period: {type: string}}}
    /upload/presigned-url:
        post:
            tags:
                - upload
            security:
                -
                    bearerAuth: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                fileName:
                                    type: string
                                    minLength: 1
                                    description: 'Original filename with extension'
                                contentType:
                                    type: string
                                    pattern: ^image/
                                    description: 'MIME type (must start with image/)'
                                fileSize:
                                    type: integer
                                    maximum: 10485760
                                    description: 'File size in bytes (max 10MB)'
                            required:
                                - fileName
                                - contentType
                                - fileSize
            responses:
                '200':
                    description: 'Presigned URL generated successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    uploadUrl: {type: string, format: uri, description: 'Presigned URL for uploading the file'}
                                    fileUrl: {type: string, format: uri, description: 'Public URL where the file will be accessible'}
                                    fileName: {type: string, description: 'Generated unique filename'}
                                    expiresIn: {type: integer, description: 'URL expiration time in seconds'}
                                required:
                                    - uploadUrl
                                    - fileUrl
                                    - fileName
                                    - expiresIn
                '400':
                    description: 'Invalid upload request'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    error: {type: string}
                '401':
                    description: 'Authentication required'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '403':
                    description: 'Vendor role required'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    /upload/delete:
        delete:
            tags:
                - upload
            security:
                -
                    bearerAuth: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                fileName:
                                    type: string
                                    minLength: 1
                                    description: 'Filename to delete'
                            required:
                                - fileName
            responses:
                '200':
                    description: 'Image deleted successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '400':
                    description: 'Invalid delete request'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    error: {type: string}
                '401':
                    description: 'Authentication required'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '403':
                    description: 'Vendor role required'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    '/vendor/products/{productId}/images':
        post:
            tags:
                - vendor
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    name: productId
                    in: path
                    required: true
                    schema:
                        type: string
                    description: 'Product ID'
            requestBody:
                content:
                    application/json:
                        schema:
                            type: array
                            items:
                                type: object
                                properties:
                                    fileName: {type: string, minLength: 1}
                                    fileUrl: {type: string, format: uri}
                                    altText: {type: string}
                                    isPrimary: {type: boolean, default: false}
                                    sortOrder: {type: integer, minimum: 0, default: 0}
                                required:
                                    - fileName
                                    - fileUrl
            responses:
                '201':
                    description: 'Images added successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    addedCount: {type: integer}
                '401':
                    description: 'Authentication required'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '403':
                    description: 'Vendor role required'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '404':
                    description: 'Product not found or access denied'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
        get:
            tags:
                - vendor
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    name: productId
                    in: path
                    required: true
                    schema:
                        type: string
                    description: 'Product ID'
            responses:
                '200':
                    description: 'Product images retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties: {id: {type: string}, productId: {type: string}, fileName: {type: string}, fileUrl: {type: string, format: uri}, altText: {type: string}, isPrimary: {type: boolean}, sortOrder: {type: integer}, createdAt: {type: string, format: date-time}}
                '401':
                    description: 'Authentication required'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '403':
                    description: 'Vendor role required'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    '/vendor/products/{productId}/images/{imageId}':
        put:
            tags:
                - vendor
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    name: productId
                    in: path
                    required: true
                    schema:
                        type: string
                    description: 'Product ID'
                -
                    name: imageId
                    in: path
                    required: true
                    schema:
                        type: string
                    description: 'Image ID'
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                fileName:
                                    type: string
                                    minLength: 1
                                fileUrl:
                                    type: string
                                    format: uri
                                altText:
                                    type: string
                                isPrimary:
                                    type: boolean
                                sortOrder:
                                    type: integer
                                    minimum: 0
            responses:
                '200':
                    description: 'Image updated successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    id: {type: string}
                                    productId: {type: string}
                                    fileName: {type: string}
                                    fileUrl: {type: string, format: uri}
                                    altText: {type: string}
                                    isPrimary: {type: boolean}
                                    sortOrder: {type: integer}
                                    createdAt: {type: string, format: date-time}
                '401':
                    description: 'Authentication required'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '403':
                    description: 'Vendor role required'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '404':
                    description: 'Product image not found or access denied'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
        delete:
            tags:
                - vendor
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    name: productId
                    in: path
                    required: true
                    schema:
                        type: string
                    description: 'Product ID'
                -
                    name: imageId
                    in: path
                    required: true
                    schema:
                        type: string
                    description: 'Image ID'
            responses:
                '204':
                    description: 'Image deleted successfully'
                '401':
                    description: 'Authentication required'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '403':
                    description: 'Vendor role required'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '404':
                    description: 'Product image not found or access denied'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    '/vendor/products/{productId}/images/reorder':
        put:
            tags:
                - vendor
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    name: productId
                    in: path
                    required: true
                    schema:
                        type: string
                    description: 'Product ID'
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                imageIds:
                                    type: array
                                    items: {type: string}
                                    minItems: 1
                                    description: 'Array of image IDs in desired order'
                            required:
                                - imageIds
            responses:
                '200':
                    description: 'Images reordered successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '400':
                    description: 'Invalid request - some image IDs do not belong to this product'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '401':
                    description: 'Authentication required'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '403':
                    description: 'Vendor role required'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '404':
                    description: 'Product not found or access denied'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    /cart/items:
        post:
            tags:
                - cart
            security:
                -
                    bearerAuth: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                productId:
                                    type: string
                                    minLength: 1
                                quantity:
                                    type: integer
                                    exclusiveMinimum: 0
                                    maximum: 100
                            required:
                                - productId
                                - quantity
            responses:
                '200':
                    description: 'Item added to cart successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    item: {type: object, properties: {id: {type: string}, productId: {type: string}, quantity: {type: number}, createdAt: {type: string, format: date}, updatedAt: {type: [string, 'null'], format: date}, product: {type: object, properties: {id: {type: string}, name: {type: string}, price: {type: number}, imageUrl: {type: string}}, required: [id, name, price, imageUrl]}}, required: [id, productId, quantity, createdAt, updatedAt, product]}
                                required:
                                    - message
                                    - item
    '/cart/items/{productId}':
        put:
            tags:
                - cart
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: string
                        description: 'Product ID'
                    required: true
                    description: 'Product ID'
                    name: productId
                    in: path
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                quantity:
                                    type: integer
                                    exclusiveMinimum: 0
                                    maximum: 100
                            required:
                                - quantity
            responses:
                '200':
                    description: 'Cart item updated successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    item: {type: object, properties: {id: {type: string}, productId: {type: string}, quantity: {type: number}, createdAt: {type: string, format: date}, updatedAt: {type: [string, 'null'], format: date}, product: {type: object, properties: {id: {type: string}, name: {type: string}, price: {type: number}, imageUrl: {type: string}}, required: [id, name, price, imageUrl]}}, required: [id, productId, quantity, createdAt, updatedAt, product]}
                                required:
                                    - message
                                    - item
        delete:
            tags:
                - cart
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: string
                        description: 'Product ID'
                    required: true
                    description: 'Product ID'
                    name: productId
                    in: path
            responses:
                '200':
                    description: 'Item removed from cart successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                required:
                                    - message
    /cart:
        get:
            tags:
                - cart
            security:
                -
                    bearerAuth: []
            responses:
                '200':
                    description: 'Cart retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    items: {type: array, items: {type: object, properties: {id: {type: string}, productId: {type: string}, quantity: {type: number}, createdAt: {type: string, format: date}, updatedAt: {type: [string, 'null'], format: date}, product: {type: object, properties: {id: {type: string}, name: {type: string}, price: {type: number}, imageUrl: {type: string}}, required: [id, name, price, imageUrl]}}, required: [id, productId, quantity, createdAt, updatedAt, product]}}
                                    totalItems: {type: number}
                                    subtotal: {type: number}
                                    estimatedTax: {type: number}
                                    estimatedShipping: {type: number}
                                    total: {type: number}
                                required:
                                    - items
                                    - totalItems
                                    - subtotal
                                    - estimatedTax
                                    - estimatedShipping
                                    - total
        delete:
            tags:
                - cart
            security:
                -
                    bearerAuth: []
            responses:
                '200':
                    description: 'Cart cleared successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                required:
                                    - message
    /enhanced-cart:
        get:
            tags:
                - 'Enhanced Cart'
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: string
                    required: false
                    name: syncData
                    in: query
            responses:
                '200':
                    description: 'Enhanced cart retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    cart: {type: object, properties: {items: {type: array, items: {type: object, properties: {id: {type: string}, productId: {type: string}, quantity: {type: number}, createdAt: {type: string, format: date}, updatedAt: {type: [string, 'null'], format: date}, product: {type: object, properties: {id: {type: string}, name: {type: string}, price: {type: number}, imageUrl: {type: string}}, required: [id, name, price, imageUrl]}}, required: [id, productId, quantity, createdAt, updatedAt, product]}}, totalItems: {type: number}, subtotal: {type: number}, estimatedTax: {type: number}, estimatedShipping: {type: number}, total: {type: number}}, required: [items, totalItems, subtotal, estimatedTax, estimatedShipping, total]}
                                    needsSync: {type: boolean}
                                    localItemCount: {type: number}
                                    syncData: {type: object, properties: {localItems: {type: array, items: {type: object, properties: {productId: {type: string}, quantity: {type: number}, addedAt: {type: number}}, required: [productId, quantity, addedAt]}}, lastSync: {type: number}, userId: {type: string}}, required: [localItems, lastSync]}
                                required:
                                    - cart
                                    - needsSync
                                    - localItemCount
    /enhanced-cart/items:
        post:
            tags:
                - 'Enhanced Cart'
            security:
                -
                    bearerAuth: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                productId:
                                    type: string
                                quantity:
                                    type: integer
                                    exclusiveMinimum: 0
                                    maximum: 100
                            required:
                                - productId
                                - quantity
            responses:
                '200':
                    description: 'Item added to enhanced cart successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    cart: {type: object, properties: {items: {type: array, items: {type: object, properties: {id: {type: string}, productId: {type: string}, quantity: {type: number}, createdAt: {type: string, format: date}, updatedAt: {type: [string, 'null'], format: date}, product: {type: object, properties: {id: {type: string}, name: {type: string}, price: {type: number}, imageUrl: {type: string}}, required: [id, name, price, imageUrl]}}, required: [id, productId, quantity, createdAt, updatedAt, product]}}, totalItems: {type: number}, subtotal: {type: number}, estimatedTax: {type: number}, estimatedShipping: {type: number}, total: {type: number}}, required: [items, totalItems, subtotal, estimatedTax, estimatedShipping, total]}
                                    needsSync: {type: boolean}
                                    localItemCount: {type: number}
                                    syncData: {type: object, properties: {localItems: {type: array, items: {type: object, properties: {productId: {type: string}, quantity: {type: number}, addedAt: {type: number}}, required: [productId, quantity, addedAt]}}, lastSync: {type: number}, userId: {type: string}}, required: [localItems, lastSync]}
                                required:
                                    - cart
                                    - needsSync
                                    - localItemCount
    '/enhanced-cart/items/{productId}':
        put:
            tags:
                - 'Enhanced Cart'
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: string
                    required: true
                    name: productId
                    in: path
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                quantity:
                                    type: integer
                                    exclusiveMinimum: 0
                                    maximum: 100
                            required:
                                - quantity
            responses:
                '200':
                    description: 'Enhanced cart item updated successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    cart: {type: object, properties: {items: {type: array, items: {type: object, properties: {id: {type: string}, productId: {type: string}, quantity: {type: number}, createdAt: {type: string, format: date}, updatedAt: {type: [string, 'null'], format: date}, product: {type: object, properties: {id: {type: string}, name: {type: string}, price: {type: number}, imageUrl: {type: string}}, required: [id, name, price, imageUrl]}}, required: [id, productId, quantity, createdAt, updatedAt, product]}}, totalItems: {type: number}, subtotal: {type: number}, estimatedTax: {type: number}, estimatedShipping: {type: number}, total: {type: number}}, required: [items, totalItems, subtotal, estimatedTax, estimatedShipping, total]}
                                    needsSync: {type: boolean}
                                    localItemCount: {type: number}
                                    syncData: {type: object, properties: {localItems: {type: array, items: {type: object, properties: {productId: {type: string}, quantity: {type: number}, addedAt: {type: number}}, required: [productId, quantity, addedAt]}}, lastSync: {type: number}, userId: {type: string}}, required: [localItems, lastSync]}
                                required:
                                    - cart
                                    - needsSync
                                    - localItemCount
        delete:
            tags:
                - 'Enhanced Cart'
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: string
                    required: true
                    name: productId
                    in: path
            responses:
                '200':
                    description: 'Item removed from enhanced cart successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    cart: {type: object, properties: {items: {type: array, items: {type: object, properties: {id: {type: string}, productId: {type: string}, quantity: {type: number}, createdAt: {type: string, format: date}, updatedAt: {type: [string, 'null'], format: date}, product: {type: object, properties: {id: {type: string}, name: {type: string}, price: {type: number}, imageUrl: {type: string}}, required: [id, name, price, imageUrl]}}, required: [id, productId, quantity, createdAt, updatedAt, product]}}, totalItems: {type: number}, subtotal: {type: number}, estimatedTax: {type: number}, estimatedShipping: {type: number}, total: {type: number}}, required: [items, totalItems, subtotal, estimatedTax, estimatedShipping, total]}
                                    needsSync: {type: boolean}
                                    localItemCount: {type: number}
                                    syncData: {type: object, properties: {localItems: {type: array, items: {type: object, properties: {productId: {type: string}, quantity: {type: number}, addedAt: {type: number}}, required: [productId, quantity, addedAt]}}, lastSync: {type: number}, userId: {type: string}}, required: [localItems, lastSync]}
                                required:
                                    - cart
                                    - needsSync
                                    - localItemCount
    /enhanced-cart/sync:
        post:
            tags:
                - 'Enhanced Cart'
            security:
                -
                    bearerAuth: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                localItems:
                                    type: array
                                    items: {type: object, properties: {productId: {type: string}, quantity: {type: number}}, required: [productId, quantity]}
                            required:
                                - localItems
            responses:
                '200':
                    description: 'Local cart synced successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    cart: {type: object, properties: {items: {type: array, items: {type: object, properties: {id: {type: string}, productId: {type: string}, quantity: {type: number}, createdAt: {type: string, format: date}, updatedAt: {type: [string, 'null'], format: date}, product: {type: object, properties: {id: {type: string}, name: {type: string}, price: {type: number}, imageUrl: {type: string}}, required: [id, name, price, imageUrl]}}, required: [id, productId, quantity, createdAt, updatedAt, product]}}, totalItems: {type: number}, subtotal: {type: number}, estimatedTax: {type: number}, estimatedShipping: {type: number}, total: {type: number}}, required: [items, totalItems, subtotal, estimatedTax, estimatedShipping, total]}
                                    needsSync: {type: boolean}
                                    localItemCount: {type: number}
                                    syncData: {type: object, properties: {localItems: {type: array, items: {type: object, properties: {productId: {type: string}, quantity: {type: number}, addedAt: {type: number}}, required: [productId, quantity, addedAt]}}, lastSync: {type: number}, userId: {type: string}}, required: [localItems, lastSync]}
                                required:
                                    - cart
                                    - needsSync
                                    - localItemCount
    /enhanced-cart/stats:
        get:
            tags:
                - 'Enhanced Cart'
            security:
                -
                    bearerAuth: []
            responses:
                '200':
                    description: 'Enhanced cart statistics retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    totalItems: {type: number}
                                    uniqueProducts: {type: number}
                                    estimatedTotal: {type: number}
                                    lastUpdated: {type: string, format: date}
                                required:
                                    - totalItems
                                    - uniqueProducts
                                    - estimatedTotal
                                    - lastUpdated
    /orders:
        post:
            tags:
                - orders
            security:
                -
                    bearerAuth: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                storeId:
                                    type: string
                                shippingAddress:
                                    type: object
                                    properties: {street: {type: string}, city: {type: string}, state: {type: string}, postalCode: {type: string}, country: {type: string}}
                                    required: [street, city, state, postalCode]
                                billingAddress:
                                    type: object
                                    properties: {street: {type: string}, city: {type: string}, state: {type: string}, postalCode: {type: string}, country: {type: string}}
                                deliveryZone:
                                    type: string
                                    description: 'Delivery zone identifier (e.g., A, B, C, etc.)'
                                notes:
                                    type: string
                            required:
                                - storeId
                                - shippingAddress
                                - deliveryZone
            responses:
                '200':
                    description: 'Order created successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    order: {type: object, properties: {id: {type: string}, status: {type: string}, paymentStatus: {type: string}, total: {type: number}, deliveryZone: {type: string, nullable: true, description: 'Delivery zone identifier'}, items: {type: array, items: {type: object, properties: {id: {type: string}, productId: {type: string}, quantity: {type: number}, price: {type: number}, total: {type: number}}}}}}
        get:
            tags:
                - orders
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: string
                        description: 'Search query'
                    required: false
                    description: 'Search query'
                    name: q
                    in: query
                -
                    schema:
                        type: string
                        pattern: ^\d+$
                        default: '1'
                        description: '1-based page number'
                    required: false
                    description: '1-based page number'
                    name: page
                    in: query
                -
                    schema:
                        type: string
                        pattern: ^\d+$
                        default: '20'
                        description: 'Number of items per page'
                    required: false
                    description: 'Number of items per page'
                    name: limit
                    in: query
                -
                    schema:
                        type: string
                    required: false
                    name: storeId
                    in: query
                -
                    schema:
                        type: string
                        enum:
                            - PENDING
                            - PROCESSING
                            - SHIPPED
                            - DELIVERED
                            - CONFIRMED
                            - CANCELLED
                            - REFUNDED
                    required: false
                    name: status
                    in: query
                -
                    schema:
                        type: string
                    required: false
                    name: startDate
                    in: query
                -
                    schema:
                        type: string
                    required: false
                    name: endDate
                    in: query
            responses:
                '200':
                    description: 'Orders retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    orders: {type: array, items: {type: object, properties: {id: {type: string}, status: {type: string}, paymentStatus: {type: string}, total: {type: number}, createdAt: {type: string}}}}
                                    pagination: {type: object, properties: {page: {type: number}, limit: {type: number}, total: {type: number}, totalPages: {type: number}}}
    '/orders/{orderId}':
        get:
            tags:
                - orders
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: string
                        description: 'Order ID'
                    required: true
                    description: 'Order ID'
                    name: orderId
                    in: path
            responses:
                '200':
                    description: 'Order details retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    order: {type: object, properties: {id: {type: string}, status: {type: string}, paymentStatus: {type: string}, total: {type: number}, subtotal: {type: number}, tax: {type: number}, shipping: {type: number}, currency: {type: string}, deliveryZone: {type: string, nullable: true, description: 'Delivery zone identifier'}, createdAt: {type: string}, items: {type: array, items: {type: object, properties: {id: {type: string}, productId: {type: string}, quantity: {type: number}, price: {type: number}, total: {type: number}, product: {type: object, properties: {id: {type: string}, name: {type: string}, imageUrl: {type: string}}}}}}}}
        delete:
            tags:
                - orders
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: string
                        description: 'Order ID'
                    required: true
                    description: 'Order ID'
                    name: orderId
                    in: path
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                reason:
                                    type: string
            responses:
                '200':
                    description: 'Order cancelled successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    order: {type: object, properties: {id: {type: string}, status: {type: string}, cancelledAt: {type: string}}}
    '/vendor/orders/{orderId}/status':
        patch:
            tags:
                - vendor-orders
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: string
                        description: 'Order ID'
                    required: true
                    description: 'Order ID'
                    name: orderId
                    in: path
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                status:
                                    type: string
                                reason:
                                    type: string
                            required:
                                - status
            responses:
                '200':
                    description: 'Order status updated successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    order: {type: object, properties: {id: {type: string}, status: {type: string}, updatedAt: {type: string}}}
    /vendor/orders:
        get:
            tags:
                - vendor-orders
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: string
                        description: 'Search query'
                    required: false
                    description: 'Search query'
                    name: q
                    in: query
                -
                    schema:
                        type: string
                        pattern: ^\d+$
                        default: '1'
                        description: '1-based page number'
                    required: false
                    description: '1-based page number'
                    name: page
                    in: query
                -
                    schema:
                        type: string
                        pattern: ^\d+$
                        default: '20'
                        description: 'Number of items per page'
                    required: false
                    description: 'Number of items per page'
                    name: limit
                    in: query
                -
                    schema:
                        type: string
                    required: false
                    name: storeId
                    in: query
                -
                    schema:
                        type: string
                        enum:
                            - PENDING
                            - PROCESSING
                            - SHIPPED
                            - DELIVERED
                            - CONFIRMED
                            - CANCELLED
                            - REFUNDED
                    required: false
                    name: status
                    in: query
                -
                    schema:
                        type: string
                    required: false
                    name: startDate
                    in: query
                -
                    schema:
                        type: string
                    required: false
                    name: endDate
                    in: query
            responses:
                '200':
                    description: 'Vendor orders retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    orders: {type: array, items: {type: object, properties: {id: {type: string}, status: {type: string}, paymentStatus: {type: string}, total: {type: number}, deliveryZone: {type: string, nullable: true, description: 'Delivery zone identifier'}, customer: {type: object, properties: {id: {type: string}, email: {type: string}, firstName: {type: string}, lastName: {type: string}}}, createdAt: {type: string}}}}
                                    pagination: {type: object, properties: {page: {type: number}, limit: {type: number}, total: {type: number}, totalPages: {type: number}}}
    /vendor/orders/stats:
        get:
            tags:
                - vendor-orders
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: integer
                        minimum: 1
                        maximum: 365
                        default: 30
                    required: false
                    name: days
                    in: query
            responses:
                '200':
                    description: 'Vendor order statistics retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    period: {type: string}
                                    totalOrders: {type: number}
                                    totalRevenue: {type: number}
                                    byStatus: {type: array, items: {type: object, properties: {status: {type: string}, count: {type: number}, revenue: {type: number}}}}
    '/vendor/orders/{orderId}':
        get:
            tags:
                - vendor-orders
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: string
                        description: 'Order ID'
                    required: true
                    description: 'Order ID'
                    name: orderId
                    in: path
            responses:
                '200':
                    description: 'Vendor order details retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    order: {type: object, properties: {id: {type: string}, status: {type: string}, paymentStatus: {type: string}, total: {type: number}, subtotal: {type: number}, tax: {type: number}, shipping: {type: number}, currency: {type: string}, deliveryZone: {type: string, nullable: true, description: 'Delivery zone identifier'}, createdAt: {type: string}, customer: {type: object, properties: {id: {type: string}, email: {type: string}, firstName: {type: string}, lastName: {type: string}}}, items: {type: array, items: {type: object, properties: {id: {type: string}, productId: {type: string}, quantity: {type: number}, price: {type: number}, total: {type: number}, product: {type: object, properties: {id: {type: string}, name: {type: string}, imageUrl: {type: string}}}}}}}}
    /customer/orders:
        get:
            tags:
                - customer
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: string
                        description: 'Search query'
                    required: false
                    description: 'Search query'
                    name: q
                    in: query
                -
                    schema:
                        type: string
                        pattern: ^\d+$
                        default: '1'
                        description: '1-based page number'
                    required: false
                    description: '1-based page number'
                    name: page
                    in: query
                -
                    schema:
                        type: string
                        pattern: ^\d+$
                        default: '20'
                        description: 'Number of items per page'
                    required: false
                    description: 'Number of items per page'
                    name: limit
                    in: query
                -
                    schema:
                        type: string
                        enum:
                            - PENDING
                            - PROCESSING
                            - SHIPPED
                            - DELIVERED
                            - CANCELLED
                        description: 'Filter orders by status'
                    required: false
                    description: 'Filter orders by status'
                    name: status
                    in: query
            responses:
                '200':
                    description: 'Customer orders retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    data: {type: object, properties: {orders: {type: array, items: {type: object, properties: {id: {type: string}, status: {type: string}, paymentStatus: {type: string}, total: {type: number}, createdAt: {type: string, format: date}, updatedAt: {type: [string, 'null'], format: date}, store: {type: object, properties: {id: {type: string}, name: {type: string}}, required: [id, name]}, items: {type: array, items: {type: object, properties: {id: {type: string}, productId: {type: string}, quantity: {type: number}, price: {type: number}, product: {type: object, properties: {id: {type: string}, name: {type: string}, imageUrl: {type: string}}, required: [id, name, imageUrl]}}, required: [id, productId, quantity, price, product]}}}, required: [id, status, paymentStatus, total, createdAt, updatedAt, store, items]}}, pagination: {type: object, properties: {page: {type: number}, limit: {type: number}, total: {type: number}, totalPages: {type: number}}, required: [page, limit, total, totalPages]}}, required: [orders, pagination]}
                                required:
                                    - message
                                    - data
                '400':
                    description: 'Bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    error: {type: string}
                                required:
                                    - message
                '401':
                    description: Unauthorized
    '/customer/orders/{orderId}':
        get:
            tags:
                - customer
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: string
                        description: 'Order ID'
                    required: true
                    description: 'Order ID'
                    name: orderId
                    in: path
            responses:
                '200':
                    description: 'Customer order details retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    data: {type: object, properties: {order: {type: object, properties: {id: {type: string}, status: {type: string}, paymentStatus: {type: string}, total: {type: number}, subtotal: {type: number}, tax: {type: number}, shipping: {type: number}, discount: {type: number}, currency: {type: string}, createdAt: {type: string, format: date}, updatedAt: {type: [string, 'null'], format: date}, estimatedDelivery: {type: [string, 'null'], format: date}, deliveredAt: {type: [string, 'null'], format: date}, shippingAddress: {type: [object, 'null'], properties: {street: {type: string}, city: {type: string}, state: {type: string}, postalCode: {type: string}, country: {type: string}}, required: [street, city, state, postalCode, country]}, billingAddress: {type: [object, 'null'], properties: {street: {type: string}, city: {type: string}, state: {type: string}, postalCode: {type: string}, country: {type: string}}, required: [street, city, state, postalCode, country]}, store: {type: object, properties: {id: {type: string}, name: {type: string}, slug: {type: string}}, required: [id, name, slug]}, items: {type: array, items: {type: object, properties: {id: {type: string}, productId: {type: string}, quantity: {type: number}, price: {type: number}, product: {type: object, properties: {id: {type: string}, name: {type: string}, imageUrl: {type: string}}, required: [id, name, imageUrl]}}, required: [id, productId, quantity, price, product]}}}, required: [id, status, paymentStatus, total, subtotal, tax, shipping, discount, currency, createdAt, updatedAt, estimatedDelivery, deliveredAt, shippingAddress, billingAddress, store, items]}}, required: [order]}
                                required:
                                    - message
                                    - data
                '400':
                    description: 'Bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    error: {type: string}
                                required:
                                    - message
                '401':
                    description: Unauthorized
                '403':
                    description: 'Access denied - customer can only access their own orders'
                '404':
                    description: 'Order not found'
    '/customer/orders/{orderId}/tracking':
        get:
            tags:
                - customer
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: string
                        description: 'Order ID'
                    required: true
                    description: 'Order ID'
                    name: orderId
                    in: path
            responses:
                '200':
                    description: 'Order tracking details retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    data: {type: object, properties: {orderId: {type: string}, status: {type: string}, paymentStatus: {type: string}, estimatedDelivery: {type: [string, 'null'], format: date}, deliveredAt: {type: [string, 'null'], format: date}, currentLocation: {type: string}, trackingEvents: {type: array, items: {type: object, properties: {eventType: {type: string}, description: {type: string}, timestamp: {type: string, format: date}}, required: [eventType, description, timestamp]}}, deliveryUpdates: {type: array, items: {type: object, properties: {status: {type: string}, location: {type: [string, 'null']}, timestamp: {type: string, format: date}, description: {type: string}}, required: [status, location, timestamp, description]}}}, required: [orderId, status, paymentStatus, estimatedDelivery, deliveredAt, currentLocation, trackingEvents, deliveryUpdates]}
                                required:
                                    - message
                                    - data
                '400':
                    description: 'Bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    error: {type: string}
                                required:
                                    - message
                '401':
                    description: Unauthorized
                '403':
                    description: 'Access denied - customer can only access their own orders'
                '404':
                    description: 'Order not found'
    /customer/stats:
        get:
            tags:
                - customer
            security:
                -
                    bearerAuth: []
            responses:
                '200':
                    description: 'Customer statistics retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    data: {type: object, properties: {totalOrders: {type: number}, totalSpent: {type: number}, averageOrderValue: {type: number}, ordersThisMonth: {type: number}}, required: [totalOrders, totalSpent, averageOrderValue, ordersThisMonth]}
                                required:
                                    - message
                                    - data
                '400':
                    description: 'Bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    error: {type: string}
                                required:
                                    - message
                '401':
                    description: Unauthorized
    /customer/dashboard:
        get:
            tags:
                - customer
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: string
                        enum:
                            - 7d
                            - 30d
                            - 90d
                            - 1y
                            - all
                        default: 30d
                    required: false
                    name: period
                    in: query
            responses:
                '200':
                    description: 'Customer dashboard statistics retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    totalOrders: {type: number}
                                    totalSpent: {type: number}
                                    averageOrderValue: {type: number}
                                    ordersThisMonth: {type: number}
                                    spendingThisMonth: {type: number}
                                    favoriteStores: {type: array, items: {type: object, properties: {storeId: {type: string}, storeName: {type: string}, orderCount: {type: number}, totalSpent: {type: number}}}}
                                    recentActivity: {type: array, items: {type: object, properties: {eventType: {type: string}, description: {type: string}, timestamp: {type: string}, orderId: {type: string}, orderTotal: {type: number}, storeName: {type: string}}}}
                                    orderStatusBreakdown: {type: object, properties: {pending: {type: number}, processing: {type: number}, shipped: {type: number}, delivered: {type: number}, cancelled: {type: number}}}
                '401':
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    /customer/analytics:
        get:
            tags:
                - customer
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: number
                        minimum: 1
                        maximum: 365
                        default: 30
                    required: false
                    name: days
                    in: query
            responses:
                '200':
                    description: 'Customer analytics retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    orderTrends: {type: array, items: {type: object, properties: {date: {type: string}, orderCount: {type: number}}}}
                                    spendingTrends: {type: array, items: {type: object, properties: {date: {type: string}, amount: {type: number}}}}
                                    categoryBreakdown: {type: array, items: {type: object, properties: {productId: {type: string}, quantity: {type: number}}}}
                '401':
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    /customer/preferences:
        get:
            tags:
                - customer
            security:
                -
                    bearerAuth: []
            responses:
                '200':
                    description: 'Customer preferences retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    spendingPatterns: {type: object, properties: {averageOrderValue: {type: number}, preferredOrderDay: {type: string}, preferredOrderTime: {type: string}, totalSpent: {type: number}}}
                                    favoriteProducts: {type: array, items: {type: object, properties: {productId: {type: string}, productName: {type: string}, purchaseCount: {type: number}, lastPurchased: {type: string}}}}
                                    preferredStores: {type: array, items: {type: object, properties: {storeId: {type: string}, storeName: {type: string}, orderCount: {type: number}, totalSpent: {type: number}, averageRating: {type: number}}}}
                                    shoppingBehavior: {type: object, properties: {mostActiveMonth: {type: string}, averageItemsPerOrder: {type: number}, preferredCategories: {type: array, items: {type: string}}, returnRate: {type: number}}}
                '401':
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    /notifications:
        get:
            tags:
                - notifications
            security:
                -
                    bearerAuth: []
            responses:
                '200':
                    description: 'Notifications retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    data: {type: object, properties: {notifications: {type: array, items: {type: object, properties: {id: {type: string}, userId: {type: string}, type: {type: string}, title: {type: string}, message: {type: string}, isRead: {type: boolean}, metadata: {type: [object, 'null'], additionalProperties: {type: string}}, createdAt: {type: string, format: date}, updatedAt: {type: [string, 'null'], format: date}}, required: [id, userId, type, title, message, isRead, metadata, createdAt, updatedAt]}}, pagination: {type: object, properties: {page: {type: number}, limit: {type: number}, total: {type: number}, totalPages: {type: number}}, required: [page, limit, total, totalPages]}}, required: [notifications, pagination]}
                                required:
                                    - message
                                    - data
                '400':
                    description: 'Bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    error: {type: string}
                                required:
                                    - message
                '401':
                    description: Unauthorized
    '/notifications/{notificationId}/read':
        patch:
            tags:
                - notifications
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: string
                        description: 'Notification ID'
                    required: true
                    description: 'Notification ID'
                    name: notificationId
                    in: path
            responses:
                '200':
                    description: 'Notification marked as read successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    data: {type: object, properties: {notification: {type: object, properties: {id: {type: string}, userId: {type: string}, type: {type: string}, title: {type: string}, message: {type: string}, isRead: {type: boolean}, metadata: {type: [object, 'null'], additionalProperties: {type: string}}, createdAt: {type: string, format: date}, updatedAt: {type: [string, 'null'], format: date}}, required: [id, userId, type, title, message, isRead, metadata, createdAt, updatedAt]}}, required: [notification]}
                                required:
                                    - message
                                    - data
                '400':
                    description: 'Bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    error: {type: string}
                                required:
                                    - message
                '401':
                    description: Unauthorized
                '404':
                    description: 'Notification not found'
    /notifications/read-all:
        patch:
            tags:
                - notifications
            security:
                -
                    bearerAuth: []
            responses:
                '200':
                    description: 'All notifications marked as read successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    data: {type: object, properties: {updatedCount: {type: number}}, required: [updatedCount]}
                                required:
                                    - message
                                    - data
                '400':
                    description: 'Bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    error: {type: string}
                                required:
                                    - message
                '401':
                    description: Unauthorized
    /notifications/unread-count:
        get:
            tags:
                - notifications
            security:
                -
                    bearerAuth: []
            responses:
                '200':
                    description: 'Unread notification count retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    data: {type: object, properties: {unreadCount: {type: number}}, required: [unreadCount]}
                                required:
                                    - message
                                    - data
                '400':
                    description: 'Bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    error: {type: string}
                                required:
                                    - message
                '401':
                    description: Unauthorized
    /super/system/overview:
        get:
            tags:
                - super-admin
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    name: startDate
                    in: query
                    schema:
                        type: string
                        format: date
                    description: 'Start date for overview (ISO format)'
                -
                    name: endDate
                    in: query
                    schema:
                        type: string
                        format: date
                    description: 'End date for overview (ISO format)'
            responses:
                '200':
                    description: 'System overview data'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    overview: {type: object, properties: {totalUsers: {type: number}, totalVendors: {type: number}, totalStores: {type: number}, totalProducts: {type: number}, totalOrders: {type: number}, totalRevenue: {type: number}, totalPayouts: {type: number}, period: {type: object, properties: {startDate: {type: string, format: date-time}, endDate: {type: string, format: date-time}}}}}
                                    recentActivity: {type: object, properties: {users: {type: array, items: {type: object}}, orders: {type: array, items: {type: object}}}}
                                    systemHealth: {type: object, properties: {database: {type: string}, activeStores: {type: number}, lowStockProducts: {type: number}, pendingPayouts: {type: number}, timestamp: {type: string, format: date-time}}}
                '401':
                    description: Unauthorized
                '403':
                    description: 'Super admin access required'
    /super/vendors:
        get:
            tags:
                - super-admin
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    name: page
                    in: query
                    schema:
                        type: number
                        minimum: 1
                        default: 1
                    description: 'Page number'
                -
                    name: limit
                    in: query
                    schema:
                        type: number
                        minimum: 1
                        maximum: 100
                        default: 20
                    description: 'Items per page'
                -
                    name: search
                    in: query
                    schema:
                        type: string
                    description: 'Search vendors by email or store name'
                -
                    name: status
                    in: query
                    schema:
                        type: string
                        enum:
                            - active
                            - inactive
                            - all
                        default: all
                    description: 'Filter by store status'
            responses:
                '200':
                    description: 'Vendor overview data'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    vendors: {type: array, items: {type: object, properties: {id: {type: string}, email: {type: string}, role: {type: string}, storeId: {type: [string, 'null']}, firstName: {type: [string, 'null']}, lastName: {type: [string, 'null']}, phone: {type: [string, 'null']}, createdAt: {type: string, format: date-time}, updatedAt: {type: [string, 'null'], format: date-time}, store: {type: object}, stats: {type: object}}}}
                                    meta: {type: object, properties: {total: {type: number}, page: {type: number}, pageSize: {type: number}, totalPages: {type: number}}}
                '401':
                    description: Unauthorized
                '403':
                    description: 'Super admin access required'
    /super/payments/overview:
        get:
            tags:
                - super-admin
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    name: startDate
                    in: query
                    schema:
                        type: string
                        format: date
                    description: 'Start date for overview (ISO format)'
                -
                    name: endDate
                    in: query
                    schema:
                        type: string
                        format: date
                    description: 'End date for overview (ISO format)'
                -
                    name: status
                    in: query
                    schema:
                        type: string
                        enum:
                            - all
                            - pending
                            - completed
                            - failed
                        default: all
                    description: 'Filter by payout status'
            responses:
                '200':
                    description: 'Payment overview data'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    payouts: {type: array, items: {type: object}}
                                    overview: {type: object, properties: {totalPayouts: {type: number}, totalAmount: {type: number}, period: {type: object}}}
                                    stats: {type: object}
                '401':
                    description: Unauthorized
                '403':
                    description: 'Super admin access required'
    '/super/vendors/{vendorId}':
        get:
            tags:
                - super-admin
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    name: vendorId
                    in: path
                    required: true
                    schema:
                        type: string
                    description: 'Vendor ID'
            responses:
                '200':
                    description: 'Vendor details'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    id: {type: string}
                                    email: {type: string}
                                    role: {type: string}
                                    storeId: {type: [string, 'null']}
                                    firstName: {type: [string, 'null']}
                                    lastName: {type: [string, 'null']}
                                    phone: {type: [string, 'null']}
                                    createdAt: {type: string, format: date-time}
                                    updatedAt: {type: [string, 'null'], format: date-time}
                                    store: {type: object}
                                    vendorPayouts: {type: array, items: {type: object}}
                                    stats: {type: object}
                '401':
                    description: Unauthorized
                '403':
                    description: 'Super admin access required'
                '404':
                    description: 'Vendor not found'
    /super/analytics:
        get:
            tags:
                - super-admin
            security:
                -
                    bearerAuth: []
            responses:
                '200':
                    description: 'System analytics data'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    userGrowth: {type: array, items: {type: object}}
                                    orderGrowth: {type: array, items: {type: object}}
                                    revenueGrowth: {type: array, items: {type: object}}
                                    topVendors: {type: array, items: {type: object}}
                '401':
                    description: Unauthorized
                '403':
                    description: 'Super admin access required'
    /vendor-onboarding/application:
        post:
            tags:
                - vendor
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                businessName:
                                    type: string
                                    minLength: 2
                                    maxLength: 100
                                businessType:
                                    type: string
                                    enum: [INDIVIDUAL, SOLE_PROPRIETORSHIP, PARTNERSHIP, LIMITED_LIABILITY_COMPANY, CORPORATION, COOPERATIVE, OTHER]
                                businessDescription:
                                    type: string
                                    minLength: 10
                                    maxLength: 1000
                                businessAddress:
                                    type: string
                                    minLength: 10
                                    maxLength: 200
                                businessPhone:
                                    type: string
                                    minLength: 10
                                    maxLength: 20
                                taxIdentification:
                                    type: string
                                    nullable: true
                                ghanaCardNumber:
                                    type: string
                                    pattern: '^GHA-\d{9}-[A-Z]$'
                                bankName:
                                    type: string
                                    minLength: 2
                                    maxLength: 100
                                bankAccountNumber:
                                    type: string
                                    minLength: 10
                                    maxLength: 20
                                bankAccountName:
                                    type: string
                                    minLength: 2
                                    maxLength: 100
                                bankCode:
                                    type: string
                                    minLength: 3
                                    maxLength: 10
                                expectedMonthlySales:
                                    type: string
                                    enum: [UNDER_1000, ONE_TO_FIVE_THOUSAND, FIVE_TO_TEN_THOUSAND, TEN_TO_FIFTY_THOUSAND, FIFTY_TO_HUNDRED_THOUSAND, OVER_HUNDRED_THOUSAND]
                                productCategories:
                                    type: array
                                    items: {type: string}
                                    minItems: 1
                                    maxItems: 10
                                    nullable: true
                                socialMediaLinks:
                                    type: object
                                    properties: {facebook: {type: string, format: uri, nullable: true}, instagram: {type: string, format: uri, nullable: true}, twitter: {type: string, format: uri, nullable: true}, linkedin: {type: string, format: uri, nullable: true}}
                                    nullable: true
                            required:
                                - businessName
                                - businessType
                                - businessDescription
                                - businessAddress
                                - businessPhone
                                - ghanaCardNumber
                                - bankName
                                - bankAccountNumber
                                - bankAccountName
                                - bankCode
                                - expectedMonthlySales
            responses:
                '201':
                    description: 'Vendor application submitted successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    application: {type: object}
                '400':
                    description: 'Invalid request'
                '409':
                    description: 'Application already exists'
    /vendor-onboarding/documents:
        post:
            tags:
                - vendor
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                documentType:
                                    type: string
                                    enum: [GHANA_CARD]
                                side:
                                    type: string
                                    enum: [FRONT, BACK]
                                fileName:
                                    type: string
                                    minLength: 1
                                    maxLength: 255
                                fileUrl:
                                    type: string
                                    format: uri
                                fileSize:
                                    type: number
                                    minimum: 1
                                mimeType:
                                    type: string
                                    minLength: 1
                                    maxLength: 100
                            required:
                                - documentType
                                - side
                                - fileName
                                - fileUrl
                                - fileSize
                                - mimeType
            responses:
                '201':
                    description: 'Business document uploaded successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    document: {type: object}
                '400':
                    description: 'Invalid request'
                '409':
                    description: 'Document already uploaded'
        get:
            tags:
                - vendor
            responses:
                '200':
                    description: 'Business documents retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    documents: {type: array, items: {type: object, properties: {id: {type: string}, documentType: {type: string}, fileName: {type: string}, fileUrl: {type: string, format: uri}, fileSize: {type: number}, mimeType: {type: string}, isVerified: {type: boolean}, verificationNotes: {type: string, nullable: true}, uploadedAt: {type: string, format: date-time}, verifiedAt: {type: string, format: date-time, nullable: true}, verifiedBy: {type: string, nullable: true}, applicationId: {type: string}, side: {type: string, enum: [FRONT, BACK], nullable: true}}}}
                '400':
                    description: 'Invalid request'
                '404':
                    description: 'Vendor application not found'
    '/vendor-onboarding/documents/{documentId}':
        delete:
            tags:
                - vendor
            parameters:
                -
                    name: documentId
                    in: path
                    required: true
                    schema:
                        type: string
                        description: 'Document ID'
                    description: 'Document ID'
            responses:
                '200':
                    description: 'Business document deleted successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '400':
                    description: 'Invalid request'
                '401':
                    description: Unauthorized
                '404':
                    description: 'Document not found or access denied'
    /vendor-onboarding/upload-url:
        post:
            tags:
                - vendor
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                fileName:
                                    type: string
                                    minLength: 1
                                    description: 'Original filename with extension'
                                contentType:
                                    type: string
                                    pattern: ^image/
                                    description: 'MIME type (must start with image/)'
                                fileSize:
                                    type: integer
                                    maximum: 10485760
                                    description: 'File size in bytes (max 10MB)'
                            required:
                                - fileName
                                - contentType
                                - fileSize
            responses:
                '200':
                    description: 'Presigned URL generated successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    uploadUrl: {type: string, format: uri, description: 'Presigned URL for uploading the file'}
                                    fileUrl: {type: string, format: uri, description: 'Public URL where the file will be accessible'}
                                    fileName: {type: string, description: 'Generated unique filename'}
                                    expiresIn: {type: integer, description: 'URL expiration time in seconds'}
                                required:
                                    - uploadUrl
                                    - fileUrl
                                    - fileName
                                    - expiresIn
                '400':
                    description: 'Invalid request'
                '401':
                    description: Unauthorized
    /vendor-onboarding/admin/applications:
        get:
            tags:
                - admin
            parameters:
                -
                    name: status
                    in: query
                    required: false
                    schema:
                        type: string
                        enum:
                            - PENDING
                            - UNDER_REVIEW
                            - DOCUMENTS_REQUESTED
                            - APPROVED
                            - REJECTED
                            - SUSPENDED
                    description: 'Filter by application status'
                -
                    name: businessType
                    in: query
                    required: false
                    schema:
                        type: string
                        enum:
                            - INDIVIDUAL
                            - SOLE_PROPRIETORSHIP
                            - PARTNERSHIP
                            - LIMITED_LIABILITY_COMPANY
                            - CORPORATION
                            - COOPERATIVE
                            - OTHER
                    description: 'Filter by business type'
                -
                    name: page
                    in: query
                    required: false
                    schema:
                        type: integer
                        minimum: 1
                        default: 1
                    description: 'Page number for pagination'
                -
                    name: limit
                    in: query
                    required: false
                    schema:
                        type: integer
                        minimum: 1
                        maximum: 100
                        default: 20
                    description: 'Number of items per page'
                -
                    name: search
                    in: query
                    required: false
                    schema:
                        type: string
                    description: 'Search by business name, user email, or Ghana Card number'
            responses:
                '200':
                    description: 'Vendor applications retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    applications: {type: array, items: {type: object}}
                                    meta: {type: object, properties: {total: {type: number}, page: {type: number}, limit: {type: number}, totalPages: {type: number}}}
                '400':
                    description: 'Invalid request'
                '401':
                    description: Unauthorized
                '403':
                    description: 'Forbidden - Admin access required'
    '/vendor-onboarding/admin/applications/{applicationId}/review':
        post:
            tags:
                - admin
            parameters:
                -
                    name: applicationId
                    in: path
                    required: true
                    schema:
                        type: string
                        description: 'Application ID'
                    description: 'Application ID'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - status
                                - reviewNotes
                            properties:
                                status:
                                    type: string
                                    enum: [APPROVED, REJECTED, DOCUMENTS_REQUESTED, UNDER_REVIEW]
                                    description: 'Review decision status'
                                reviewNotes:
                                    type: string
                                    minLength: 1
                                    maxLength: 1000
                                    description: 'Review notes and comments'
                                rejectionReason:
                                    type: string
                                    minLength: 1
                                    maxLength: 500
                                    description: 'Reason for rejection (required if status is REJECTED)'
            responses:
                '200':
                    description: 'Vendor application reviewed successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    application: {type: object}
                '400':
                    description: 'Invalid request'
                '401':
                    description: Unauthorized
                '403':
                    description: 'Forbidden - Admin access required'
                '404':
                    description: 'Application not found'
    '/vendor-onboarding/admin/applications/{applicationId}':
        get:
            tags:
                - admin
            parameters:
                -
                    name: applicationId
                    in: path
                    required: true
                    schema:
                        type: string
                        description: 'Application ID'
                    description: 'Application ID'
            responses:
                '200':
                    description: 'Vendor application retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    application: {type: object}
                '400':
                    description: 'Invalid request'
                '401':
                    description: Unauthorized
                '403':
                    description: 'Forbidden - Admin access required'
                '404':
                    description: 'Application not found'
    '/vendor-onboarding/admin/applications/{applicationId}/status':
        put:
            tags:
                - admin
            parameters:
                -
                    name: applicationId
                    in: path
                    required: true
                    schema:
                        type: string
                        description: 'Application ID'
                    description: 'Application ID'
            responses:
                '200':
                    description: 'Vendor application status updated successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    application: {type: object}
                '400':
                    description: 'Invalid request'
                '401':
                    description: Unauthorized
                '403':
                    description: 'Forbidden - Admin access required'
                '404':
                    description: 'Application not found'
    '/vendor-onboarding/admin/documents/{documentId}/verify':
        post:
            tags:
                - admin
            parameters:
                -
                    name: documentId
                    in: path
                    required: true
                    schema:
                        type: string
                        description: 'Document ID'
                    description: 'Document ID'
            responses:
                '200':
                    description: 'Business document verification not yet implemented'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '400':
                    description: 'Invalid request'
                '401':
                    description: Unauthorized
                '403':
                    description: 'Forbidden - Admin access required'
    /vendor-onboarding/admin/dashboard:
        get:
            tags:
                - admin
            responses:
                '200':
                    description: 'Vendor onboarding dashboard retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    dashboard: {type: object, properties: {totalApplications: {type: number}, pendingApplications: {type: number}, approvedApplications: {type: number}, rejectedApplications: {type: number}, averageProcessingTime: {type: number}, applicationsByStatus: {type: array, items: {type: object, properties: {status: {type: string}, count: {type: number}}}}, applicationsByBusinessType: {type: array, items: {type: object, properties: {businessType: {type: string}, count: {type: number}}}}, recentApplications: {type: array, items: {type: object}}}}
                '401':
                    description: Unauthorized
                '403':
                    description: 'Forbidden - Admin access required'
    /vendor-onboarding/admin/cleanup/orphaned:
        post:
            tags:
                - admin
            responses:
                '200':
                    description: 'Orphaned applications and documents cleaned up successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    cleanedApplications: {type: number}
                                    cleanedDocuments: {type: number}
                                    errors: {type: array, items: {type: string}}
                '400':
                    description: 'Cleanup failed'
                '401':
                    description: Unauthorized
                '403':
                    description: 'Forbidden - Admin access required'
    '/vendor-onboarding/admin/applications/{applicationId}/cleanup':
        delete:
            tags:
                - admin
            parameters:
                -
                    name: applicationId
                    in: path
                    required: true
                    schema:
                        type: string
                        description: 'Application ID'
                    description: 'Application ID'
            responses:
                '200':
                    description: 'Vendor application cleaned up successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                '400':
                    description: 'Cleanup failed'
                '401':
                    description: Unauthorized
                '403':
                    description: 'Forbidden - Admin access required'
                '404':
                    description: 'Application not found'
    /bank-verification/banks:
        get:
            tags:
                - bank-verification
            summary: 'Get list of banks'
            description: 'Retrieve a list of all available banks from Paystack'
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    name: country
                    in: query
                    description: 'Country code (default: nigeria)'
                    schema:
                        type: string
                        default: nigeria
                -
                    name: perPage
                    in: query
                    description: 'Number of banks per page'
                    schema:
                        type: integer
                        minimum: 1
                        maximum: 100
                        default: 50
                -
                    name: active
                    in: query
                    description: 'Filter by active status'
                    schema:
                        type: boolean
                        default: true
            responses:
                '200':
                    description: 'Banks retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    banks: {type: array, items: {type: object, properties: {id: {type: integer}, name: {type: string}, slug: {type: string}, code: {type: string}, longcode: {type: string}, gateway: {type: string, nullable: true}, pay_with_bank: {type: boolean}, active: {type: boolean}, country: {type: string}, currency: {type: string}, type: {type: string}, is_deleted: {type: boolean}}}}
                '401':
                    description: 'Unauthorized - Authentication required'
                '500':
                    description: 'Internal server error'
    /bank-verification/banks/verify:
        post:
            tags:
                - bank-verification
            summary: 'Verify bank account number'
            description: 'Verify a bank account number using Paystack API'
            security:
                -
                    bearerAuth: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                accountNumber:
                                    type: string
                                    minLength: 1
                                    maxLength: 20
                                    description: 'Bank account number (various lengths supported)'
                                bankCode:
                                    type: string
                                    minLength: 3
                                    maxLength: 10
                                    description: 'Bank code from the bank list'
                            required:
                                - accountNumber
                                - bankCode
            responses:
                '200':
                    description: 'Bank account verified successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    verification: {type: object, properties: {account_number: {type: string}, account_name: {type: string}, bank_id: {type: integer}}}
                '400':
                    description: 'Bad request - Invalid account number or bank code'
                '401':
                    description: 'Unauthorized - Authentication required'
                '500':
                    description: 'Internal server error'
    '/bank-verification/banks/{bankCode}':
        get:
            tags:
                - bank-verification
            summary: 'Get bank by code'
            description: 'Retrieve bank details by bank code'
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    name: bankCode
                    in: path
                    required: true
                    description: 'Bank code'
                    schema:
                        type: string
            responses:
                '200':
                    description: 'Bank retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    bank: {type: object, properties: {id: {type: integer}, name: {type: string}, slug: {type: string}, code: {type: string}, longcode: {type: string}, gateway: {type: string, nullable: true}, pay_with_bank: {type: boolean}, active: {type: boolean}, country: {type: string}, currency: {type: string}, type: {type: string}, is_deleted: {type: boolean}}}
                '401':
                    description: 'Unauthorized - Authentication required'
                '404':
                    description: 'Bank not found'
                '500':
                    description: 'Internal server error'
    /bank-verification/banks/search:
        get:
            tags:
                - bank-verification
            summary: 'Search banks'
            description: 'Search banks by name or code'
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    name: search
                    in: query
                    required: true
                    description: 'Search term (bank name or code)'
                    schema:
                        type: string
                        minLength: 2
            responses:
                '200':
                    description: 'Banks search completed'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    banks: {type: array, items: {type: object, properties: {id: {type: integer}, name: {type: string}, slug: {type: string}, code: {type: string}, longcode: {type: string}, gateway: {type: string, nullable: true}, pay_with_bank: {type: boolean}, active: {type: boolean}, country: {type: string}, currency: {type: string}, type: {type: string}, is_deleted: {type: boolean}}}}
                '400':
                    description: 'Bad request - Search term is required'
                '401':
                    description: 'Unauthorized - Authentication required'
                '500':
                    description: 'Internal server error'
    /payments/initialize:
        post:
            tags:
                - payment
            summary: 'Initialize Paystack payment'
            description: 'Initialize a new payment with Paystack for an order'
            security:
                -
                    bearerAuth: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                orderId:
                                    type: string
                                    minLength: 1
                                email:
                                    type: string
                                    format: email
                                amount:
                                    type: number
                                    exclusiveMinimum: 0
                                callbackUrl:
                                    type: string
                                    format: uri
                                metadata:
                                    type: object
                                    additionalProperties: {}
                            required:
                                - orderId
                                - email
                                - amount
            responses:
                '200':
                    description: 'Payment initialized successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    authorizationUrl: {type: string}
                                    reference: {type: string}
                                required:
                                    - authorizationUrl
                                    - reference
                '400':
                    description: 'Bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    /payments/verify:
        post:
            tags:
                - payment
            summary: 'Verify payment status'
            description: 'Verify the status of a payment using the reference'
            security:
                -
                    bearerAuth: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                reference:
                                    type: string
                                    minLength: 1
                            required:
                                - reference
            responses:
                '200':
                    description: 'Payment verified successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status: {type: string}
                                    order: {}
                                    payment: {}
                                required:
                                    - status
                '400':
                    description: 'Bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    /payments/history:
        get:
            tags:
                - payment
            summary: 'Get payment history'
            description: 'Get the payment history for the authenticated user'
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: string
                        description: 'Search query'
                    required: false
                    description: 'Search query'
                    name: q
                    in: query
                -
                    schema:
                        type: string
                        pattern: ^\d+$
                        default: '1'
                        description: '1-based page number'
                    required: false
                    description: '1-based page number'
                    name: page
                    in: query
                -
                    schema:
                        type: string
                        pattern: ^\d+$
                        default: '20'
                        description: 'Number of items per page'
                    required: false
                    description: 'Number of items per page'
                    name: limit
                    in: query
            responses:
                '200':
                    description: 'Payment history retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    payments: {type: array, items: {}}
                                    pagination: {type: object, properties: {page: {type: number}, limit: {type: number}, total: {type: number}, totalPages: {type: number}}, required: [page, limit, total, totalPages]}
                                required:
                                    - payments
                                    - pagination
                '500':
                    description: 'Internal server error'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    '/payments/{paymentId}':
        get:
            tags:
                - payment
            summary: 'Get payment details'
            description: 'Get detailed information about a specific payment'
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: string
                        description: 'Payment ID'
                    required: true
                    description: 'Payment ID'
                    name: paymentId
                    in: path
            responses:
                '200':
                    description: 'Payment details retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    payment: {}
                '400':
                    description: 'Bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    '/payments/{paymentId}/refund':
        post:
            tags:
                - payment
            summary: 'Refund payment'
            description: 'Process a refund for a payment'
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    schema:
                        type: string
                        description: 'Payment ID'
                    required: true
                    description: 'Payment ID'
                    name: paymentId
                    in: path
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                reason:
                                    type: string
                                    minLength: 1
                            required:
                                - reason
            responses:
                '200':
                    description: 'Refund processed successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                    payment: {}
                                required:
                                    - message
                '400':
                    description: 'Bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
    /payments/webhook:
        post:
            tags:
                - payment
            summary: 'Paystack webhook handler'
            description: 'Handle Paystack webhook events for payment updates'
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            description: 'Paystack webhook payload'
            responses:
                '200':
                    description: 'Webhook processed successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
                                required:
                                    - message
                '401':
                    description: 'Invalid signature'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error: {type: string}
                '500':
                    description: 'Internal server error'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string}
webhooks: {}
